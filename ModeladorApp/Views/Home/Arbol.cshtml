@model IEnumerable<ModeladorApp.Models.Entities.TB_PERMISOS>
<html>
<head>
    <meta http-equiv="content-type" content="text/html; charset=ISO-8859-1" />

    <title>ON - Modelador Web</title>

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jquery.fancytree/2.38.0/skin-awesome/ui.fancytree.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jquery.fancytree/2.38.0/skin-bootstrap-n/ui.fancytree.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jquery.fancytree/2.38.0/skin-bootstrap/ui.fancytree.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jquery.fancytree/2.38.0/skin-xp/ui.fancytree.min.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.js"></script>
    <!-- This demo uses an 3rd-party, jQuery UI based context menu -->
    <link href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css" rel="stylesheet" />
    <script src="//code.jquery.com/ui/1.12.1/jquery-ui.min.js"></script>
    <!-- jquery-contextmenu (https://github.com/mar10/jquery-ui-contextmenu/) -->
    <script src="//cdn.jsdelivr.net/npm/ui-contextmenu/jquery.ui-contextmenu.min.js"></script>

    <style type="text/css">
        .ui-menu {
            width: 180px;
            font-size: 63%;
        }

            .ui-menu kbd {
                /* Keyboard shortcuts for ui-contextmenu titles */
                float: right;
            }
        /* custom alignment (set by 'renderColumns'' event) */
        td.alignRight {
            text-align: right;
        }

        td.alignCenter {
            text-align: center;
        }

        td input[type="input"] {
            width: 40px;
        }

        /*scroll horizontal para ver las columnas que van añadiendo a derecha*/
        div.tab-pane {
            overflow: auto;
            white-space: nowrap;
        }
    </style>

    <script type="text/javascript">

        window.onload = loadTree();

        var CLIPBOARD = null;
        var tempPyId; // servirá para deshacernos de la vista del proyecto.

        var pySelected; //servira para identificar los valores de las cajitas por el id del tree elegido.

        async function loadTree(vIdProject, vPermiso) {

            var treeReach; //la que rendizará los datos en la tabla.
            var data; // la que contendra la data de la función asyncrona.

            //console.log(vPermiso);

            if (typeof (vIdProject) === 'undefined' || vIdProject == 0) {

                data = await funGetMasterData()
                treeReach = "tree_0";

                pySelected = 0;
            } else {
                data = await funGetPyFromUsuario(vIdProject)
                treeReach = "tree_" + vIdProject;
                tempPyId = vIdProject;

                pySelected = vIdProject;
            }

            if (data.length >= 1) {

                $("#loader").hide();

                if (typeof (vIdProject) === 'undefined' || vIdProject == 0) {

                    $("#proyecto_" + tempPyId).removeClass('active');
                    $('#proyecto_0').attr('class', "tab-pane active");

                } else {

                    $("#proyecto_0").removeClass('active');
                    $('#proyecto_' + vIdProject).attr('class', "tab-pane active");
                }

                $(function () {

                    $("#" + treeReach).fancytree({

                        titlesTabbable: true, // Add all node titles to TAB chain
                        quicksearch: true, // Jump to nodes when pressing first character
                        source: data,
                        // Llamada cada vez que se expande un nodo LAZY.
                        lazyLoad: function (event, data) {

                            var node = data.node;     //obtenemos el nodo
                            /*console.log(node.data.id);*/ // obtenemos el id para mandarlo como parent
                            //console.log(node.data.parentId)

                            data.result = {
                                url: "/Home/funGetSubLvls",
                                data: { parent: node.data.id },
                                cache: false
                            };

                            //console.log(data);
                        },

                        ////Evento Expand para capturar algo cuando se expande el arbol
                        //expand: function (data) {
                        //    console.log("expandiendo");
                        //    console.log(data);
                        //    $(".OrgDataTreeNotChecked").children(".fancytree-title").css({ 'color': 'red' });
                        //},

                        extensions: ["edit", "dnd5", "table", "gridnav"],

                        dnd5: {
                            preventVoidMoves: true,
                            preventRecursion: true,
                            autoExpandMS: 400,
                            dragStart: function (node, data) {


                                //function saveData(node.data.id);

                                return true;
                            },
                            dragEnter: function (node, data) {
                                // return ["before", "after"];
                                return true;
                            },
                            dragDrop: function (node, data) {
                                data.otherNode.moveTo(node, data.hitMode);
                            },
                        },
                        edit: {
                            triggerStart: ["f2", "shift+click", "mac+enter"],
                            close: function (event, data) {

                                if (data.save && data.isNew) {
                                    // Quick-enter: add new nodes until we hit [enter] on an empty title

                                    $("#tree").trigger("nodeCommand", {
                                        cmd: "addSibling",
                                    });

                                    //console.log("Se presionó ENTER");
                                    //console.log("------------------->>");
                                    //console.log(data.node.title); //enviar como title
                                    //console.log(data.node.parent.data.id) //enviar como parent id
                                    //console.log(data.node.parent.data.proyectoId) //enviar como proyectoId

                                    //------------------------>>AJAX GRABAR NVO NODO
                                    //console.log(data.node.parent.data);
                                    if (typeof (data.node.parent.data.parentId) === 'undefined') {

                                        Swal.fire('ADVERTENCIA', 'Intentas agregar un nodo hermano a la raiz del Árbol, aparecerá en la vista temporal, mas no se guardarán los cambios.', 'warning')

                                    } else if (vPermiso == "EDITOR") {
                                        $.ajax({
                                            type: "POST",
                                            dataType: "json",
                                            url: "/Home/funInsertLvl",
                                            data: {
                                                "titulo": data.node.title,
                                                "parent": data.node.parent.data.id,
                                                "projectId": data.node.parent.data.proyectoId
                                            },
                                            success: function (response) {
                                                //console.log(response);
                                            },
                                        });
                                        //------------------------>>AJAX GRABAR NVO NODO
                                        data.node.parent.resetLazy() //Recarga de nodo padre para obtener los ids de la data creada.
                                    } else {

                                        Swal.fire('ADVERTENCIA', 'Puedes editar el proyecto en su respectiva pestaña EDITOR, si tienes el permiso correspondiente.', 'warning')
                                    }
                                }
                            },
                        },
                        table: {
                            indentation: 20,
                            nodeColumnIdx: 1,
                            //checkboxColumnIdx: 0, //para poner checkboxes en la columna 1
                        },
                        gridnav: {
                            autofocusInput: false,
                            handleCursorKeys: true,
                        },
                        createNode: function (event, data) {
                            var node = data.node,
                                $tdList = $(node.tr).find(">td");

                            //console.log("Desglose de nodo...");

                            // Span the remaining columns if it's a folder.
                            // We can do this in createNode instead of renderColumns, because
                            // the `isFolder` status is unlikely to change later
                            if (node.isFolder()) {
                                $tdList
                                    .eq(2)
                                    .prop("colspan", 6)
                                    .nextAll()
                                    .remove();
                            }
                        },
                        renderColumns: function (event, data) {
                            var node = data.node,
                                $tdList = $(node.tr).find(">td");

                            //console.log(node.tr.rowIndex);
                            if (node.tr.rowIndex >= 2) { //obtenemos el indice de la fila creada y apartir de ahi creamos el indexador
                                $tdList.eq(0).text(node.getIndexHier());
                            }
                            //$tdList.eq(2).text(node.data.fechaCreacion);
                            //console.log(node.data.fechaCreacion);
                            //console.log(node.data.id); // id único de cada elemento del arbol.
                            var estilos = getStyles(node.data.id);//-------> estilos del árbol
                            estilos.then(function (estilosresponse) {

                                if (estilosresponse.length != 0) {

                                    for (s = 0; s <= estilosresponse.length - 1; s++) {

                                        if (estilosresponse[s].style == 'bold') {
                                            node.span.style.fontWeight = estilosresponse[s].style; //LETRA NEGRITA
                                        } else if (estilosresponse[s].style == 'italic') {
                                            node.span.style.fontStyle = estilosresponse[s].style;  //LETRA CURSIVA.
                                        } else if (estilosresponse[s].style == 'Lime') {
                                            node.span.style.backgroundColor = estilosresponse[s].style;  //SUBRAYADO VERDE.
                                        } else if (estilosresponse[s].style == 'Aqua') {
                                            node.span.style.backgroundColor = estilosresponse[s].style;  //SUBRAYADO AZUL.
                                        } else if (estilosresponse[s].style == 'Yellow') {
                                            node.span.style.backgroundColor = estilosresponse[s].style;  //SUBRAYADO AMARILLO.
                                        } else if (estilosresponse[s].style == 'Fuchsia') {
                                            node.span.style.backgroundColor = estilosresponse[s].style;  //SUBRAYADO FUSCIA.
                                        } else if (estilosresponse[s].style == 'Red') {
                                            node.span.style.backgroundColor = estilosresponse[s].style;  //ELEMENTO CARPETA.
                                        } else if (estilosresponse[s].style == 'true') {
                                            console.log("FOLDER")
                                            node.folder = true;  //LETRA CURSIVA.
                                        }
                                    }
                                }
                            });                         
                           
                            // (Index #0 is rendered by fancytree by adding the checkbox)
                            // Set column #1 info from node data:
                            //$tdList.eq(0).text(node.getIndexHier());
                            // (Index #2 is rendered by fancytree)

                            //---------------------------------------------------------->>>
                            //console.log(pySelected)
                            var titles = funGetTitulos(pySelected)
                            titles.then(function (result) {
                                //console.log(result);
                                var colName = "";

                                if (result.length != 0) {
                                    // 50 cajas para nombres de  columnas.                                  

                                    for (h = 0; h <= result.length - 1; h++) {
                                        $('#' + treeReach + '_colth_' + result[h].tituloID).remove(); //removemos para que no se vuelvan a crear cada vez que inicializamos el arbol
                                        colName = colName + '<th id="' + treeReach + '_colth_' + result[h].tituloID + '"><input id="' + treeReach + '_colname_' + result[h].tituloID + '" onchange="InsertUpdateTitulo(`' + treeReach + '_colname`,' + h + ',' + result[h].tituloID + ',' + pySelected + ',`' + vPermiso + '` )" type="text" value="' + result[h].titulo + '" style="width: 60px;"></th>';
                                    }
                                    $('#head_' + treeReach).append(colName).fadeIn(300000);
                                }                               
                            });

                            //console.log($tdList);
                            //console.log(node.data.id);
                            //---------> obtener los datos de la tabla TB_NIVEL_INFO segun el id.
                            var info = funGetInfo(node.data.id)
                            info.then(function (result) {

                                // Si la longitud del resultado es distinta de 0 hay datos.
                                if (result.length != 0) {

                                    var m = 2;

                                    for (n = 0; n <= result.length - 1; n++) {

                                        for (i = 2; i <= 52; i++) {

                                            $tdList.eq(m).html('<input type="text" id="' + treeReach + '_colvalue' + result[n].infoID + '" value="' + result[n].informacion + '" onchange="insertOrUpdateInfoGrilla(`tree_' + pySelected + '`,`' + result[n].infoID + '`,`' + 0 + '`,`' + 0 + '`,`' + vPermiso + '`)" style="width: 60px;">');
                                        }
                                        m = m + 1;
                                        for (j = m; j <= 52; j++) {

                                            $tdList.eq(j).html('<input id="' + treeReach + '_colvalue_' + j + '_' + node.data.id + '" onchange="insertOrUpdateInfoGrilla(`tree_' + pySelected + '`,`' + 0 + '`,`' + j + '`,`' + node.data.id + '`,`' + vPermiso + '`)" type="text" style="width: 60px;"/>');

                                        }
                                    }
                                } else { // Sino no hay ningun dato en las cajas de un arbol. crear las cajas desde 0

                                    //console.log("Construir desde 0");
                                    for (k = 2; k <= 52; k++) {

                                        $tdList.eq(k).html('<input id="' + treeReach + '_colvalue_' + k + '_' + node.data.id + '" onchange="insertOrUpdateInfoGrilla(`tree_' + pySelected + '`,`' + 0 + '`,`' + k + '`,`' + node.data.id + '`,`' + vPermiso + '`)" type="text" style="width: 60px;"/>');

                                    }
                                }

                            });
                            // Podemos setear la información en la columna 2 (la que continua al titulo.)
                            //$tdList.eq(2).find("input").val("hola");
                            //$tdList.eq(2).html('<input type="text" value="' + node.data.id + '">');
                        },
                        modifyChild: function (event, data) {
                            data.tree.info(event.type, data);

                            //console.log(data.childNode.data.id);
                            //console.log(data.childNode.title); //nombre a actualizar
                            //console.log("------------>>")

                            if (data.node.parent != null) {
                                //console.log("Tiene parent")
                                //Buscar que solo actualice nodos cuando tienen un id
                                try {
                                    if (data.childNode.data.id != null && vPermiso == "EDITOR") {
                                        //console.log("entro al update")
                                        //------------------------>>AJAX Actualizar Nombre de Nodos hijos
                                        $.ajax({
                                            type: "POST",
                                            dataType: "json",
                                            url: "/Home/funUpdateLvlName",
                                            data: {
                                                "Id": data.childNode.data.id,
                                                "nombre": data.childNode.title,
                                            },
                                            success: function (response) {
                                                //console.log(response);
                                            },
                                        });
                                        //------------------------>>AJAX Actualizar Nombre de Nodos hijos
                                    }
                                } catch (error) {
                                    //console.log("entro al error")
                                    //console.error(error);
                                }

                            } else if (data.childNode.data.id != null && vPermiso == "EDITOR") {
                                //console.log("No se puede realizar nada sin nodo padre.");
                                //console.log(data.childNode.data.id) //id para actualizar nombre del nodo padre
                                //console.log(data.childNode.title) //nuevo titulo de nodo padre.

                                //------------------------>>AJAX Actualizar Nombre de Nodo Padre
                                $.ajax({
                                    type: "POST",
                                    dataType: "json",
                                    url: "/Home/funUpdateLvlName",
                                    data: {
                                        "Id": data.childNode.data.id,
                                        "nombre": data.childNode.title,
                                    },
                                    success: function (response) {
                                        //console.log(response);
                                    },
                                });
                                //------------------------>>AJAX Actualizar Nombre de Nodo Padre

                            }

                        },
                    })
                        .on("nodeCommand", function (event, data) {
                            // Custom event handler that is triggered by keydown-handler and
                            // context menu:
                            var refNode,
                                moveMode,
                                tree = $.ui.fancytree.getTree(this),
                                node = tree.getActiveNode();

                            //console.log("--------------------->>Add")
                            //console.log(node.data.id) //enviar como parent id
                            //console.log(node.childNode) //enviar como parent id
                            //console.log("--------------------->>Add")

                            switch (data.cmd) {
                                case "addChild":
                                case "addSibling":
                                //console.log("------------>>")
                                //console.log(data.cmd)
                                case "indent":
                                case "moveDown":
                                case "moveUp":
                                case "outdent":

                                case "remove":
                                    tree.applyCommand(data.cmd, node);

                                    if (data.cmd == "remove" && vPermiso == "EDITOR") {

                                        //console.log(node.data.id); // id a eliminar padre e hijos.
                                        //------------------------>>AJAX Eliminar Nivel Padre e Hijos
                                        $.ajax({
                                            type: "POST",
                                            dataType: "json",
                                            url: "/Home/funDeleteLvlAndSublvls",
                                            data: {
                                                "Id": node.data.id,
                                            },
                                            success: function (response) {
                                                //console.log(response);
                                            },
                                        });
                                        //------------------------>>AJAX Eliminar Nivel Padre e Hijos
                                    };

                                    break;

                                case "rename":
                                    tree.applyCommand(data.cmd, node);

                                    break;
                                case "cut":
                                    CLIPBOARD = { mode: data.cmd, data: node };
                                    break;
                                case "copy":
                                    CLIPBOARD = {
                                        mode: data.cmd,
                                        data: node.toDict(true, function (dict, node) {
                                            delete dict.key;
                                        }),
                                    };
                                    break;
                                case "clear":
                                    CLIPBOARD = null;
                                    break;
                                case "paste":
                                    if (CLIPBOARD.mode === "cut") {
                                        // refNode = node.getPrevSibling();
                                        CLIPBOARD.data.moveTo(node, "child");
                                        CLIPBOARD.data.setActive();
                                    } else if (CLIPBOARD.mode === "copy") {
                                        node.addChildren(
                                            CLIPBOARD.data
                                        ).setActive();
                                    }
                                    break;
                                case "applybold":
                                    //tree.applyCommand(data.cmd, node);
                                    //console.log("Aplicar Negrita");
                                    //console.log(node.data.id); // id del nodo.
                                    var rpt = applyOrRemoveStyle(node.data.id, "bold", "STYLE_APPLY")
                                    rpt.then(function (styleresponse) {

                                        //console.log(styleresponse);
                                        if (styleresponse > 0) {
                                            node.span.style.fontWeight = "bold"
                                        } else {
                                            Swal.fire('ERROR', 'Hubo un problema, probablemente el estilo ya existe.', 'warning')
                                        }
                                    });
                                    //if(statusText)
                                    //addColumn(treeReach, node.data.id);
                                    break;
                                case "removebold":
                                    //tree.applyCommand(data.cmd, node);
                                    //console.log("Quitar negrita");
                                    var rpt = applyOrRemoveStyle(node.data.id, "bold", "STYLE_REMOVE")
                                    rpt.then(function (styleresponse) {

                                        //console.log(styleresponse);
                                        if (styleresponse > 0) {
                                            node.span.style.fontWeight = "";
                                        } else {
                                            Swal.fire('ERROR', 'Hubo un problema quitando el estilo', 'warning')
                                        }
                                    });                                    
                                    //addColumn(treeReach, node.data.id);
                                    break;
                                case "applyitalic":
                                    //tree.applyCommand(data.cmd, node);
                                    //console.log("Aplicar Cursiva");
                                    var rpt = applyOrRemoveStyle(node.data.id, "italic", "STYLE_APPLY")
                                    rpt.then(function (styleresponse) {

                                        //console.log(styleresponse);
                                        if (styleresponse > 0) {
                                            node.span.style.fontStyle = "italic"
                                        } else {
                                            Swal.fire('ERROR', 'Hubo un problema, probablemente el estilo ya existe.', 'warning')
                                        }
                                    });
                                    //console.log(node.data.id); // id del nodo.
                                    //addColumn(treeReach, node.data.id);
                                    break;
                                case "removeitalic":
                                    //tree.applyCommand(data.cmd, node);
                                    //console.log("Quitar negrita");
                                    var rpt = applyOrRemoveStyle(node.data.id, "italic", "STYLE_REMOVE")
                                    rpt.then(function (styleresponse) {
                                        //console.log(styleresponse);
                                        if (styleresponse > 0) {
                                            node.span.style.fontStyle = "";
                                        } else {
                                            Swal.fire('ERROR', 'Hubo un problema quitando el estilo', 'warning')
                                        }
                                    });
                                    //console.log(node.data.id); // id del nodo.
                                    //addColumn(treeReach, node.data.id);
                                    break;
                                case "greensubrayado":
                                    //tree.applyCommand(data.cmd, node);
                                    console.log("Subrayar verde");
                                    var rpt = applyOrRemoveStyle(node.data.id, "Lime", "STYLE_APPLY")
                                    rpt.then(function (styleresponse) {
                                        //console.log(styleresponse);
                                        if (styleresponse > 0) {
                                            node.span.style.backgroundColor = "Lime";
                                        } else {
                                            Swal.fire('ERROR', 'Hubo un problema, si ya cuenta con un subrayado quítelo antes de agregar otro.', 'warning')
                                        }
                                    });
                                    //console.log(node.data.id); // id del nodo.
                                    //addColumn(treeReach, node.data.id);
                                    break;
                                case "bluesubrayado":
                                    //tree.applyCommand(data.cmd, node);
                                    console.log("Subrayar azúl");
                                    var rpt = applyOrRemoveStyle(node.data.id, "Aqua", "STYLE_APPLY")
                                    rpt.then(function (styleresponse) {
                                        //console.log(styleresponse);
                                        if (styleresponse > 0) {
                                            node.span.style.backgroundColor = "Aqua";
                                        } else {
                                            Swal.fire('ERROR', 'Hubo un problema, si ya cuenta con un subrayado quítelo antes de agregar otro.', 'warning')
                                        }
                                    });
                                    //console.log(node.data.id); // id del nodo.
                                    //addColumn(treeReach, node.data.id);
                                    break;
                                case "yellowsubrayado":
                                    //tree.applyCommand(data.cmd, node);
                                    console.log("Subrayar amarillo");
                                    var rpt = applyOrRemoveStyle(node.data.id, "Yellow", "STYLE_APPLY")
                                    rpt.then(function (styleresponse) {
                                        //console.log(styleresponse);
                                        if (styleresponse > 0) {
                                            node.span.style.backgroundColor = "Yellow";
                                        } else {
                                            Swal.fire('ERROR', 'Hubo un problema, si ya cuenta con un subrayado quítelo antes de agregar otro.', 'warning')
                                        }
                                    });
                                    //console.log(node.data.id); // id del nodo.
                                    //addColumn(treeReach, node.data.id);
                                    break;
                                case "fuchsiasubrayado":
                                    //tree.applyCommand(data.cmd, node);
                                    console.log("Subrayar fuchsia");
                                    var rpt = applyOrRemoveStyle(node.data.id, "Fuchsia", "STYLE_APPLY")
                                    rpt.then(function (styleresponse) {
                                        //console.log(styleresponse);
                                        if (styleresponse > 0) {
                                            node.span.style.backgroundColor = "Fuchsia";
                                        } else {
                                            Swal.fire('ERROR', 'Hubo un problema, si ya cuenta con un subrayado quítelo antes de agregar otro.', 'warning')
                                        }
                                    });
                                    //console.log(node.data.id); // id del nodo.
                                    //addColumn(treeReach, node.data.id);
                                    break;
                                case "redsubrayado":
                                    //tree.applyCommand(data.cmd, node);
                                    console.log("Subrayar rojo");
                                    var rpt = applyOrRemoveStyle(node.data.id, "Red", "STYLE_APPLY")
                                    rpt.then(function (styleresponse) {
                                        //console.log(styleresponse);
                                        if (styleresponse > 0) {
                                            node.span.style.backgroundColor = "Red";
                                        } else {
                                            Swal.fire('ERROR', 'Hubo un problema, si ya cuenta con un subrayado quítelo antes de agregar otro.', 'warning')
                                        }
                                    });
                                    //console.log(node.data.id); // id del nodo.
                                    //addColumn(treeReach, node.data.id);
                                    break;
                                case "removesubrayado":
                                    //tree.applyCommand(data.cmd, node);
                                    //console.log("Quitar subrayado");
                                    var rpt1 = applyOrRemoveStyle(node.data.id, "Lime", "STYLE_REMOVE")                                    
                                    var rpt2 = applyOrRemoveStyle(node.data.id, "Aqua", "STYLE_REMOVE")                                    
                                    var rpt3 = applyOrRemoveStyle(node.data.id, "Yellow", "STYLE_REMOVE")                                    
                                    var rpt4 = applyOrRemoveStyle(node.data.id, "Fuchsia", "STYLE_REMOVE")                                    
                                    var rpt5 = applyOrRemoveStyle(node.data.id, "Red", "STYLE_REMOVE")                                  
                                    node.span.style.backgroundColor = "";
                                    //console.log(node.data.id); // id del nodo.
                                    //addColumn(treeReach, node.data.id);
                                    break;

                                case "setfoldericon":
                                    //tree.applyCommand(data.cmd, node);
                                    console.log("Añadir icono de folder");
                                    var rpt = applyOrRemoveStyle(node.data.id, "true", "STYLE_APPLY")
                                    rpt.then(function (styleresponse) {
                                        //console.log(styleresponse);
                                        if (styleresponse > 0) {
                                            node.folder = true;
                                        } else {
                                            Swal.fire('ERROR', 'Hubo un problema, Puede que el nivel ya cuente con ícono de carpeta', 'warning')
                                        }
                                    });
                                    //console.log(node.data.id); // id del nodo.
                                    //addColumn(treeReach, node.data.id);
                                    break;

                                case "removefoldericon":
                                    //tree.applyCommand(data.cmd, node);
                                    console.log("Quitar icono de folder");
                                    var rpt = applyOrRemoveStyle(node.data.id, "true", "STYLE_REMOVE")
                                    rpt.then(function (styleresponse) {
                                        //console.log(styleresponse);
                                        if (styleresponse > 0) {
                                            node.folder = "";
                                        } else {
                                            Swal.fire('ERROR', 'Hubo un problema quitando el estilo', 'warning')
                                        }
                                    });
                                    //console.log(node.data.id); // id del nodo.
                                    //addColumn(treeReach, node.data.id);
                                    break;
                                case "addnchilds":
                                    //tree.applyCommand(data.cmd, node);
                                    //console.log("Añadir n hijos");
                                    //console.log(node.data.id);
                                    $('#modal-utilities').modal('show');

                                    $('#txtIdParent').val(node.data.id);
                                    $('#txtPyID').val(pySelected);
                                    $('#txtTree').val(treeReach);                                    
                                    //console.log(nodo.parent);
                                   
                                    break;
                                //case "showgrid":
                                //    //tree.applyCommand(data.cmd, node);
                                //    console.log("Mostrar columnas");
                                //    console.log(node)
                                //    //console.log(node.data.id); // id del nodo.
                                //    //addColumn(treeReach, node.data.id);
                                //    break;
                                //case "hidegrid":
                                //    //tree.applyCommand(data.cmd, node);
                                //    console.log("ocultar columnas");
                                //    console.log(node)
                                //    //console.log(node.data.id); // id del nodo.
                                //    //addColumn(treeReach, node.data.id);
                                //    break;
                                //case "newcolumn":
                                //    //tree.applyCommand(data.cmd, node);
                                //    console.log("Nueva columna");
                                //    console.log(node)
                                //    //console.log(node.data.id); // id del nodo.
                                //    //addColumn(treeReach, node.data.id);
                                //    break;
                                default:
                                    alert("Unhandled command: " + data.cmd);
                                    return;
                            }
                        })
                        .on("keydown", function (e) {
                            var cmd = null;
                            //------------------------------- EVENTOS DESENCADENADOS POR TECLAS.
                            // console.log(e.type, $.ui.fancytree.eventToString(e));
                            switch ($.ui.fancytree.eventToString(e)) {
                                case "ctrl+shift+n":
                                case "meta+shift+n": // mac: cmd+shift+n
                                    cmd = "addChild";
                                    break;
                                case "ctrl+c":
                                case "meta+c": // mac
                                    cmd = "copy";
                                    break;
                                case "ctrl+v":
                                case "meta+v": // mac
                                    cmd = "paste";
                                    break;
                                case "ctrl+x":
                                case "meta+x": // mac
                                    cmd = "cut";
                                    break;
                                case "ctrl+n":
                                case "meta+n": // mac
                                    cmd = "addSibling";
                                    break;
                                /*case "del":*/ //Tecla DEL para eliminar un nodo
                                case "meta+backspace": // mac
                                    cmd = "remove";
                                    break;
                                // case "f2":  // already triggered by ext-edit pluging
                                //   cmd = "rename";
                                //   break;
                                case "ctrl+up":
                                case "ctrl+shift+up": // mac
                                    cmd = "moveUp";
                                    break;
                                case "ctrl+down":
                                case "ctrl+shift+down": // mac
                                    cmd = "moveDown";
                                    break;
                                case "ctrl+right":
                                case "ctrl+shift+right": // mac
                                    cmd = "indent";
                                    break;
                                case "ctrl+left":
                                case "ctrl+shift+left": // mac
                                    cmd = "outdent";
                            }
                            if (cmd) {
                                $(this).trigger("nodeCommand", { cmd: cmd });
                                return false;
                            }
                        });

                    /*
                     * Tooltips
                     */
                    // $("#tree").tooltip({
                    //   content: function () {
                    //     return $(this).attr("title");
                    //   }
                    // });

                    /*
                     * Context menu (https://github.com/mar10/jquery-ui-contextmenu)
                     */
                    $("#" + treeReach).contextmenu({
                        delegate: "span.fancytree-node",
                        menu: [
                            {
                                title: "Editar <kbd>[F2]</kbd>",
                                cmd: "rename",
                                uiIcon: "ui-icon-pencil",
                            },
                            {
                                title: "Eliminar <kbd>[Del]</kbd>",
                                cmd: "remove",
                                uiIcon: "ui-icon-trash",
                            },
                            { title: "----" },
                            {
                                title: "Nuevo Hermano <kbd>[Ctrl+N]</kbd>",
                                cmd: "addSibling",
                                uiIcon: "ui-icon-plus",
                            },
                            {
                                title: "Nuevo Hijo <kbd>[Ctrl+Shift+N]</kbd>",
                                cmd: "addChild",
                                uiIcon: "ui-icon-arrowreturn-1-e",
                            }, { title: "----" },
                            {
                                title: "Aplicar letra Negrita",
                                cmd: "applybold",
                            }, {
                                title: "Quitar letra Negrita",
                                cmd: "removebold",
                            }
                            , {
                                title: "Aplicar letra Cursiva",
                                cmd: "applyitalic",
                            }, {
                                title: "Quitar letra Cursiva",
                                cmd: "removeitalic",
                            }, { title: "----" },
                            {
                                title: "Subrayar verde",
                                cmd: "greensubrayado",
                            }, {
                                title: "Subrayar azul",
                                cmd: "bluesubrayado",
                            }, {
                                title: "Subrayar amarillo",
                                cmd: "yellowsubrayado",
                            }, {
                                title: "Subrayar fuchsia",
                                cmd: "fuchsiasubrayado",
                            }, {
                                title: "Subrayar rojo",
                                cmd: "redsubrayado",
                            }, {
                                title: "Quitar Subrayado",
                                cmd: "removesubrayado",
                            }, { title: "----" },
                            {
                                title: "Setear icono de folder",
                                cmd: "setfoldericon",
                            },
                            {
                                title: "Quitar icono de folder",
                                cmd: "removefoldericon",
                            }, { title: "----" },
                            {
                                title: "Añadir n hijos",
                                cmd: "addnchilds",
                            }
                            //, {
                            //    title: "Mostrar Grilla",
                            //    cmd: "showgrid",
                            //},
                            //{
                            //    title: "Ocultar Grilla",
                            //    cmd: "hidegrid",
                            //},
                            //{
                            //    title: "Nueva Columna",
                            //    cmd: "newcolumn",
                            //    uiIcon: "ui-icon-plus",
                            //},
                            //{ title: "----" },
                            //{
                            //    title: "Cortar <kbd>Ctrl+X</kbd>",
                            //    cmd: "cut",
                            //    uiIcon: "ui-icon-scissors",
                            //},
                            //{
                            //    title: "Copiar <kbd>Ctrl-C</kbd>",
                            //    cmd: "copy",
                            //    uiIcon: "ui-icon-copy",
                            //},
                            //{
                            //    title: "Pegar as child<kbd>Ctrl+V</kbd>",
                            //    cmd: "paste",
                            //    uiIcon: "ui-icon-clipboard",
                            //    disabled: true,
                            //},

                        ],
                        beforeOpen: function (event, ui) {
                            var node = $.ui.fancytree.getNode(ui.target);
                            $("#" + treeReach).contextmenu(
                                "enableEntry",
                                "paste",
                                !!CLIPBOARD
                            );
                            node.setActive();
                        },
                        select: function (event, ui) {
                            var that = this;
                            // delay the event, so the menu can close and the click event does
                            // not interfere with the edit control
                            setTimeout(function () {
                                $(that).trigger("nodeCommand", { cmd: ui.cmd });
                            }, 100);
                        },
                    });

                }); //---------> End Fancytree..

            } else {

                //console.log("proyecto de usuario");

            } //--------> End If
        }

        //---------------- carga de proyecto MASTER
        function funGetMasterData() {
            var url = "/Home/funGetLvl";
            return $.get(url, {}, function (data) {
                //console.log(data);
            });
        };

        //---------------- carga de proyecto de Usuario...
        function funGetPyFromUsuario(vIdProject) {
            var url = "/Home/funGetLvlFromPyUsuario";
            return $.get(url, { idProyecto: vIdProject }, function (data) {
                //console.log(data);
            });
        };
        //-------------------------------- para obtener los titulos de las columnas...
        async function funGetTitulos(pyId) {
            return titles = await funGetTitlesFromDB(pyId);
            //var info = await funGetInfoFromDB(lvlID);
            //console.log(info)
        };

        function funGetTitlesFromDB(pyId) {
            var url = "/Home/funGetColumnTitles";
            return $.get(url, { idProyecto: pyId }, function (data) {
                //console.log(data);
            });
        }

        function InsertUpdateTitulo(tree, i, id, idpy, permiso) {

            //console.log(permiso);

            if (typeof (permiso) === 'undefined' || permiso == "VIEWER") {

                Swal.fire('ADVERTENCIA', 'Puedes editar el proyecto en su respectiva pestaña EDITOR, si tienes el permiso correspondiente.', 'warning')

            } else {

                var urlToGo = "";
                var dataToGo;
                //console.log(tree, i)
                if (id > 0) {

                    var tituloUpdate = $('#' + tree + "_" + id).val();

                    //console.log(tree);
                    //console.log(tituloUpdate);

                    urlToGo = "/Home/funUpdateTitulo";
                    dataToGo = { "id": id, "title": tituloUpdate }

                    $.ajax({
                        type: "POST",
                        dataType: "json",
                        url: urlToGo,
                        data: dataToGo,
                        success: function (response) {

                            if (response > 0) {

                                Swal.fire({
                                    toast: true,
                                    background: 'orange',
                                    icon: 'success',
                                    title: 'Titulo actualizado',
                                    animation: false,
                                    position: 'bottom',
                                    showConfirmButton: false,
                                    timer: 3000,
                                    timerProgressBar: true,
                                    didOpen: (toast) => {
                                        toast.addEventListener('mouseenter', Swal.stopTimer)
                                        toast.addEventListener('mouseleave', Swal.resumeTimer)
                                    }
                                })

                            } else {

                                Swal.fire({
                                    toast: true,
                                    background: 'orange',
                                    icon: 'error',
                                    title: 'Hubo un problema',
                                    animation: false,
                                    position: 'bottom',
                                    showConfirmButton: false,
                                    timer: 3000,
                                    timerProgressBar: true,
                                    didOpen: (toast) => {
                                        toast.addEventListener('mouseenter', Swal.stopTimer)
                                        toast.addEventListener('mouseleave', Swal.resumeTimer)
                                    }
                                })
                            }
                        },
                    });


                } else {

                    var tituloInsert = $('#' + tree + i).val();
                    //console.log(tituloInsert)
                    urlToGo = "/Home/funInsertTitulo";
                    dataToGo = { "proyectoId": idpy, "title": tituloInsert }

                    $.ajax({
                        type: "POST",
                        dataType: "json",
                        url: urlToGo,
                        data: dataToGo,
                        success: function (response) {

                            if (response > 0) {

                                //removemos la funcion onchange y la volvemos a agregar solo con los parametros necesarios para la actualizacion.
                                $('#' + tree + i).removeAttr("onchange");
                                $('#' + tree + i).attr('onchange', "InsertUpdateTitulo('" + tree + "','" + i + "','" + response + "','" + idpy + "','" + permiso + "')");
                                //cambiamos el id tambien por el nuevo con solo los parametros requeridos para la actualizacion.
                                $('#' + tree + i).attr('id', tree + '_' + response);

                                Swal.fire({
                                    toast: true,
                                    background: 'orange',
                                    icon: 'success',
                                    title: 'Titulo guardado',
                                    animation: false,
                                    position: 'bottom',
                                    showConfirmButton: false,
                                    timer: 3000,
                                    timerProgressBar: true,
                                    didOpen: (toast) => {
                                        toast.addEventListener('mouseenter', Swal.stopTimer)
                                        toast.addEventListener('mouseleave', Swal.resumeTimer)
                                    }
                                })

                            } else {
                                Swal.fire({
                                    toast: true,
                                    background: 'orange',
                                    icon: 'error',
                                    title: 'Hubo un problema',
                                    animation: false,
                                    position: 'bottom',
                                    showConfirmButton: false,
                                    timer: 3000,
                                    timerProgressBar: true,
                                    didOpen: (toast) => {
                                        toast.addEventListener('mouseenter', Swal.stopTimer)
                                        toast.addEventListener('mouseleave', Swal.resumeTimer)
                                    }
                                })
                            }
                        },
                    });
                }
            }
        }

        //-------------------------------- para obtener la info de cada nivel...
        async function funGetInfo(lvlID) {
            return info = await funGetInfoFromDB(lvlID);
            //var info = await funGetInfoFromDB(lvlID);
            //console.log(info)
        };

        function funGetInfoFromDB(lvlID) {
            var url = "/Home/funGetInfoFromDB";
            return $.get(url, { lvlId: lvlID }, function (data) {
                //console.log(data);
            });
        }

        function insertOrUpdateInfoGrilla(tree, id, i, nodeId, permiso) {

            //console.log(permiso);
            if (typeof (permiso) === 'undefined' || permiso == "VIEWER") {

                Swal.fire('ADVERTENCIA', 'Puedes editar el proyecto en su respectiva pestaña EDITOR, si tienes el permiso correspondiente.', 'warning')

            } else {

                //tree: referencia al arbol
                //id: el id para actualizar en caso haya un registro guardado.
                //i: el contador de la caja empezando en 2 de izquierda a derecha hasta el 51
                //nodeId: el valor del nivel del nodo en el que estamos.

                var urlToGo = "";
                var dataToGo;

                if (id > 0) {
                    //console.log("ACTUALIZAR ! ")
                    var valorCajaUpdate = $('#' + tree + '_colvalue' + id).val();

                    urlToGo = "/Home/funUpdateInfo";
                    dataToGo = { "id": id, "informacion": valorCajaUpdate }

                    $.ajax({
                        type: "POST",
                        dataType: "json",
                        url: urlToGo,
                        data: dataToGo,
                        success: function (response) {

                            if (response > 0) {

                                Swal.fire({
                                    toast: true,
                                    background: 'orange',
                                    icon: 'success',
                                    title: 'Información actualizada',
                                    animation: false,
                                    position: 'bottom',
                                    showConfirmButton: false,
                                    timer: 3000,
                                    timerProgressBar: true,
                                    didOpen: (toast) => {
                                        toast.addEventListener('mouseenter', Swal.stopTimer)
                                        toast.addEventListener('mouseleave', Swal.resumeTimer)
                                    }
                                })

                            } else {

                                Swal.fire({
                                    toast: true,
                                    background: 'orange',
                                    icon: 'error',
                                    title: 'Hubo un problema',
                                    animation: false,
                                    position: 'bottom',
                                    showConfirmButton: false,
                                    timer: 3000,
                                    timerProgressBar: true,
                                    didOpen: (toast) => {
                                        toast.addEventListener('mouseenter', Swal.stopTimer)
                                        toast.addEventListener('mouseleave', Swal.resumeTimer)
                                    }
                                })
                            }
                        },
                    });


                } else {
                    //console.log("INSERTAR ! ")

                    var valorCajaInsert = $('#' + tree + '_colvalue_' + i + "_" + nodeId).val();

                    urlToGo = "/Home/funInsertInfo";
                    dataToGo = { "idLvl": nodeId, "info": valorCajaInsert }

                    $.ajax({
                        type: "POST",
                        dataType: "json",
                        url: urlToGo,
                        data: dataToGo,
                        success: function (response) {

                            if (response > 0) {

                                //removemos la funcion onchange y la volvemos a agregar solo con los parametros necesarios para la actualizacion.
                                $('#' + tree + '_colvalue_' + i + "_" + nodeId).removeAttr("onchange");
                                $('#' + tree + '_colvalue_' + i + "_" + nodeId).attr('onchange', "insertOrUpdateInfoGrilla('" + tree + "','" + response + "','" + 0 + "','" + 0 + "','" + permiso + "')");
                                //cambiamos el id tambien por el nuevo con solo los parametros requeridos para la actualizacion.
                                $('#' + tree + '_colvalue_' + i + "_" + nodeId).attr('id', tree + '_colvalue' + response);

                                Swal.fire({
                                    toast: true,
                                    background: 'orange',
                                    icon: 'success',
                                    title: 'Información guardada',
                                    animation: false,
                                    position: 'bottom',
                                    showConfirmButton: false,
                                    timer: 3000,
                                    timerProgressBar: true,
                                    didOpen: (toast) => {
                                        toast.addEventListener('mouseenter', Swal.stopTimer)
                                        toast.addEventListener('mouseleave', Swal.resumeTimer)
                                    }
                                })

                            } else {
                                Swal.fire({
                                    toast: true,
                                    background: 'orange',
                                    icon: 'error',
                                    title: 'Hubo un problema',
                                    animation: false,
                                    position: 'bottom',
                                    showConfirmButton: false,
                                    timer: 3000,
                                    timerProgressBar: true,
                                    didOpen: (toast) => {
                                        toast.addEventListener('mouseenter', Swal.stopTimer)
                                        toast.addEventListener('mouseleave', Swal.resumeTimer)
                                    }
                                })
                            }
                        },
                    });
                }
            }
        }

        //-------------------------------- para obtener la info de cada nivel...
        function expandOrContract(vIdProyecto) {

            $("#tree_" + vIdProyecto).fancytree("getRootNode").visit(function (node) {
                if (node.isExpanded() == true) {
                    node.setExpanded(false);
                } else {
                    node.setExpanded(true);
                }
            });
        }

        //Mensajito para la informacion que se puede editar proyecto
        function EdicionInfo() {
            Swal.fire('EDITOR', 'Puedes editar éste proyecto en su respectiva pestaña EDITOR, ya sea porque es tuyo o porque te concedieron dicho permiso.', 'info')
        }

        var tableToExcel = (function () {
            var uri = 'data:application/vnd.ms-excel;base64,'
                , template = '<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:x="urn:schemas-microsoft-com:office:excel" xmlns="http://www.w3.org/TR/REC-html40"><head><!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>{worksheet}</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]--></head><body><table>{table}</table></body></html>'
                , base64 = function (s) { return window.btoa(unescape(encodeURIComponent(s))) }
                , format = function (s, c) { return s.replace(/{(\w+)}/g, function (m, p) { return c[p]; }) }
            return function (table, name) {
                if (!table.nodeType) table = document.getElementById(table)
                var ctx = { worksheet: name || 'Worksheet', table: table.innerHTML }
                window.location.href = uri + base64(format(template, ctx))
            }
        })()

        function fnShowHideColumns(loadedTree) {         
            var select = document.getElementById('selecterColumns');
            var value = select.options[select.selectedIndex].value;
            console.log(value); // en    
            
            //console.log(loadedTree);           
            if (accionU == "HIDEALL") {
                //for para obtener las columnas por indice.
                for (c = 3; c <= 53; c++) {
                    $('#' + loadedTree + ' td:nth-child(' + c + '),th:nth-child(' + c + ')').hide();
                }
            } else if (accionU == "SHOWALL") {
                //for para obtener las columnas por indice.
                for (c = 3; c <= 53; c++) {
                    $('#' + loadedTree + ' td:nth-child(' + c + '),th:nth-child(' + c + ')').show();
                }
            }
        }

        //----------------------------------------------------------> CARGA DE COLUMNAS PARA CONFIGURACION
        var checkedColumns = [];

        function columnId(idElement) {
            this.idElement = idElement;
        };

        function loadColumnas(loadedTree, vIdProyecto) {

            $('#footer_columns_options').remove();
            var option_btns = "";

            //---------------------------------------------------------->
            //console.log(loadedTree, vIdProyecto)
            $('#tbodyAdminColumnas').remove();
            var cuerpo_columnas = "";

            var titulos = funGetTitulos(vIdProyecto)
            titulos.then(function (result) {

                //console.log(result);

                cuerpo_columnas = cuerpo_columnas + '<tbody id="tbodyAdminColumnas">';

                result.forEach(function (element) {

                    cuerpo_columnas = cuerpo_columnas + '<tr>';

                    const idPushed = checkedColumns.find(x => x.idElement == element.tituloID);

                    if (typeof (idPushed) === 'undefined') {
                        //console.log("NO ESTA PUSHEADO:" + idPushed)
                        cuerpo_columnas = cuerpo_columnas + '<td><input onclick="fnCheckColumnChanges(' + element.tituloID + ')" value=' + element.tituloID + ' type="checkbox" class="checkbox_check" name="checkbox_check[]"></td>';

                    } else {
                        //console.log("YA ESTA PUSHEADO:" + idPushed)
                        cuerpo_columnas = cuerpo_columnas + '<td><input onclick="fnCheckColumnChanges(' + element.tituloID + ')" value=' + element.tituloID + ' type="checkbox" class="checkbox_check" name="checkbox_check[]" checked></td>';
                    }
                    cuerpo_columnas = cuerpo_columnas + '<td><span class="text-muted">' + element.titulo + '</span></td>';

                    cuerpo_columnas = cuerpo_columnas + '</tr>';

                });
                cuerpo_columnas = cuerpo_columnas + '</tbody>';

                $('#tblAdminColumnas').append(cuerpo_columnas).fadeIn(300000);

                //------------------------------------------> Modal Cancel - Apply Options

                option_btns = option_btns + '<div class="modal-footer" id="footer_columns_options">';
                option_btns = option_btns + '<button type="button" class="btn me-auto" data-bs-dismiss="modal">Cancelar</button>';
                option_btns = option_btns + '<button onclick="fnApplyColumnChanges(`' + loadedTree + '`);" type="button" class="btn btn-primary" data-bs-dismiss="modal">Mostrar</button>';
                option_btns = option_btns + '</div>';

                $('#modalContent').append(option_btns).fadeIn(300000);
            });
        }


        $(document).on('change', 'input[id="checkAll"]', function () {
            checkedColumns = [];
            $('.checkbox_check').prop("checked", this.checked);

            $("input[name='checkbox_check[]']:checked").each(function () {
                //alert("Id: " + $(this).attr("id") + " Value: " + $(this).val());
                checkedColumns.push(new columnId($(this).val()));
            });
            //console.log(checkedColumns);
        });
        //----------------------------------------------------------> Manejo de los checkboxes de la función anterior.
        function fnCheckColumnChanges() {

            if ($('input.checkbox_check').is(':checked') == true) {
                checkedColumns = [];
                var m = jQuery('input:checkbox[class=checkbox_check]:checked').length;
                if (m > 0) {
                    jQuery('input:checkbox[class=checkbox_check]:checked').each(function () {

                        checkedColumns.push(new columnId($(this).val()));
                    });
                }
                //console.log(checkedColumns);
            } else {
                checkedColumns = [];
                Swal.fire('ADVERTENCIA', 'No seleccionaste ninguna columna', 'warning')
            }
        }

        function fnApplyColumnChanges(loadedTree) {

            //mostrar columnas de los checkboxes checkeados.
            checkedColumns.forEach(function (checked_element) {

                var columnIndex = $('#' + loadedTree + '_colname_' + checked_element.idElement).parent().index() + 1;
                $('#' + loadedTree + ' td:nth-child(' + columnIndex + '),th:nth-child(' + columnIndex + ')').show();

            });

            //ocultar columnas de los checkboxes no checkeados.
            var unCheckedColumns = $("input:checkbox:not(:checked)").length;
            if (unCheckedColumns > 0) {
                jQuery("input:checkbox:not(:checked)").each(function () {

                    var columnIndex = $('#' + loadedTree + '_colname_' + $(this).val()).parent().index() + 1;
                    $('#' + loadedTree + ' td:nth-child(' + columnIndex + '),th:nth-child(' + columnIndex + ')').hide();

                });
            }
        }
        //----------------------------------------------------->> Obteniendo estilos
        async function getStyles(lvlID) {
            return styles = await getStylesFromDB(lvlID);
        };

        function getStylesFromDB(lvlID) {

            var urlToGo = "";
            var dataToGo;
            //------------------------>>AJAX Obtener estilos
            return $.ajax({
                type: "GET",
                dataType: "json",
                url: "/Home/funGetLevelStyles",
                data: {
                    "nivelID": lvlID
                },
                success: function (response) {
                    //console.log(response);
                },
            });
            //------------------------>>AJAX Obtener estilos
        }
        //----------------------------------------------------->> Obteniendo estilos


        //----------------------------------------------------->> Aplicando estilos
        async function applyOrRemoveStyle(lvlID, style, action) {
            return styleReponse = await applyOrRemoveStyleToDB(lvlID, style, action);
        };

        function applyOrRemoveStyleToDB(lvlID, style, action) {

            var urlToGo = "";
            var dataToGo;

            if (action == "STYLE_APPLY") {

                urlToGo = "/Home/funInsertLvlStyle";
                dataToGo = { "nivelID": lvlID, "style": style }

                //------------------------>>AJAX Aplicar estilo
                return $.ajax({
                    type: "POST",
                    dataType: "json",
                    url: urlToGo,
                    data: dataToGo,
                    success: function (response) {
                        //console.log(response);
                    },
                });
                //------------------------>>AJAX Aplicar estilo
            } else if (action == "STYLE_REMOVE") {

                urlToGo = "/Home/funDeleteStyle";
                dataToGo = { "nivelID": lvlID, "style": style }

                //------------------------>>AJAX Aplicar estilo
                return $.ajax({
                    type: "POST",
                    dataType: "json",
                    url: urlToGo,
                    data: dataToGo,
                    success: function (response) {
                        //console.log(response);
                    },
                });

            }

        }
        //----------------------------------------------------->> Aplicando estilos
        var arrayHijos = [];

        function addNHijos() {

            arrayHijos = [];
            
            var vCant = $('#txtCantidad').val();
            var vNombre = $('#txtNombreBase').val();
            var vIDparent = $('#txtIdParent').val();
            var vIDproject = $('#txtPyID').val();
            var treeSelected = $('#txtTree').val();

            if (vCant != "" && vCant != null) {
                arrayHijos.push(vCant);
            } if (vNombre != "" && vNombre != null) {
                arrayHijos.push(vNombre);
            }
            var nroCamposLlenos = arrayHijos.length;
            if (nroCamposLlenos == 2) {

                var rpt = addNHijosAsync(vCant, vNombre, vIDparent, vIDproject)
                rpt.then(function (response) {

                    console.log(response);
                    if (response >= 1) {

                        $('#txtIdParent').val("");
                        $('#txtCantidad').val("");
                        $('#txtNombreBase').val("");
                        $('#txtPyID').val("");                        

                        $('#modal-utilities').modal('toggle');

                        Swal.fire('Niveles añadidos !', '', 'success').then((result) => {

                            var tree = $("#" + treeSelected).fancytree("getTree"); // para obtener el arbol renderizado.
                            var nodo = tree.getActiveNode(); // para obtener el nodo activo.

                            nodo.parent.resetLazy(); //recargamos el nodo parent para cargar los id de los n elementos ingresados.
                        });

                        $('#txtTree').val("");

                    } else {
                        Swal.fire('ERROR', 'Hubo un problema', 'error')
                    }
                })
                
            } else {
                Swal.fire('ADVERTENCIA', 'Complete ambos campos', 'warning')
            }

        }

        async function addNHijosAsync(vCant, vNombre, vIDparent, vIDproject) {
            return hijos = await addHijosInDB(vCant, vNombre, vIDparent, vIDproject);
        };

        function addHijosInDB(vCant, vNombre, vIDparent, vIDproject) {
            return $.ajax({
                type: "POST",
                url: "/Home/funInsertNLvls",
                data: {                    
                    "cantidad": vCant,
                    "nombreBase": vNombre,
                    "parent": vIDparent,
                    "projectID": vIDproject,
                },
                success: function (response) {
                },
            });
        }


        //function addColumn(tree, nodoId) {
        //    console.log(tree,nodoId)
        //    $('#' + tree + ' thead tr').append('<th id=th' + nodoId +'>Col</th>');
        //    $('#' + tree + ' tbody tr').append('<td id=td' + nodoId +'><input type="text" placeholder="Ingrese algo"></td>');
        //}

    </script>
</head>

<body class="example">

    <ul class="nav nav-tabs nav-fill" data-bs-toggle="tabs">

        <li class="nav-item">
            <a href="#master" onclick="loadTree(0)" class="nav-link active"
               data-bs-toggle="tab"><strong>MASTER</strong></a>
        </li>

        @foreach (var item in Model)
        {
            <li class="nav-item">
                <a href="#proyecto_@item.ProyectoID" onclick="loadTree('@item.ProyectoID', '@item.Permiso')" class="nav-link"
                   data-bs-toggle="tab">@Html.DisplayFor(modelItem => item.TB_PROYECTO.NombreProyecto) (@item.Permiso)</a>
            </li>
        }

    </ul>

    <div class="card">

        @*Loader*@
        <div class="card-body" id="loader">
            <div class="empty">
                <div class="empty-img">
                    <img src="https://miro.medium.com/max/875/1*CsJ05WEGfunYMLGfsT2sXA.gif" height="128">
                </div>
                <p class="empty-title">Cargando proyectos...</p>
            </div>
        </div>
        @*Loader*@

        <div class="tab-content">

            <div class="tab-pane" id="proyecto_0">

                <div class="row align-items-center">
                    <div class="col-auto ms-auto d-print-none">
                        <div class="btn-list">

                            <span class="d-none d-sm-inline">
                                <a href="#" class="btn btn-primary" onclick="loadColumnas('tree_0',0);" data-bs-toggle="modal" data-bs-target="#modal-simple">
                                    Columnas
                                </a>
                            </span>                      


                            <span class="d-none d-sm-inline">
                                <a onclick="tableToExcel('tree_0', 'Modelador_Master')" style="cursor:pointer" href="#" class="btn btn-secondary">
                                    EXCEL
                                </a>
                            </span>

                            <span class="d-none d-sm-inline">
                                <a onclick="expandOrContract(0)" class="btn btn-secondary">
                                    Expandir/Contraer
                                </a>
                            </span>

                            @*<span class="d-none d-sm-inline">
                                    <a href="#" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#modal-new-project">
                                        Clonar
                                    </a>
                                </span>*@

                        </div>
                    </div>
                </div>

                <table id="tree_0">
                    <colgroup>
                        <col width="2%" />
                        <col width="88%" />
                        <col width="1%" />
                    </colgroup>
                    <thead>
                        <tr id="head_tree_0">
                            <th>#</th>
                            <th>Identificador - Nombre</th>
                            @*<th>Nombre</th>*@
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Define a row template for all invariant markup: -->
                        <tr>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>

                        </tr>
                    </tbody>
                </table>

            </div>

            @foreach (var item in Model)
            {
                <div class="tab-pane" id="proyecto_@item.ProyectoID">

                    <div class="row align-items-center">
                        <div class="col-auto ms-auto d-print-none">
                            <div class="btn-list">

                                <span class="d-none d-sm-inline">
                                    <a href="#" class="btn btn-primary" onclick="loadColumnas('tree_@item.ProyectoID','@item.ProyectoID');" data-bs-toggle="modal" data-bs-target="#modal-simple">
                                        Columnas
                                    </a>
                                </span>

                                <span class="d-none d-sm-inline">
                                    <select class="form-select" id="selecterColumns" onchange="fnShowHideColumns('tree_@item.ProyectoID');">                                     
                                        <option value="SHOWALL">Mostrar todas</option>
                                        <option value="HIDEALL">Ocultar todas</option>
                                    </select>
                                </span>

                                <span class="d-none d-sm-inline">
                                    <a onclick="expandOrContract(@item.ProyectoID)" class="btn btn-secondary">
                                        Expandir/Contraer
                                    </a>
                                </span>
                                @if (item.Permiso == "EDITOR")
                                {
                                    <span class="d-none d-sm-inline">
                                        <a onclick="EdicionInfo()" class="btn btn-primary">
                                            Puedes editar este proyecto
                                        </a>
                                    </span>
                                }
                            </div>
                        </div>
                    </div>


                    <table id="tree_@item.ProyectoID">
                        <colgroup>
                            <col width="2%" />
                            <col width="88%" />
                            <col width="1%" />
                        </colgroup>
                        <thead>
                            <tr id="head_tree_@item.ProyectoID">
                                <th>#</th>
                                <th>Identificador - Nombre</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Define a row template for all invariant markup: -->
                            <tr>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                            </tr>
                        </tbody>
                    </table>

                </div>
            }

        </div>
    </div>


    <div class="modal modal-blur fade" id="modal-simple" tabindex="-1" role="dialog" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">

            <div class="modal-content" id="modalContent">
                <div class="modal-header">
                    <h5 class="modal-title">Administración de Columnas</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">

                    Desde aquí podrá elegir las columnas que desee mostrar u ocultar. Haga <br />
                    Check para Mostrarla o <br />
                    Uncheck para Ocultarla.

                    <div class="table-responsive">
                        <table id="tblAdminColumnas" class="table card-table table-vcenter text-nowrap datatable">
                            <thead>
                                <tr>
                                    <th><input id="checkAll" type="checkbox" data-parsley-multiple="checkbox"></th>
                                    <th>Nombre de Columna</th>
                                </tr>
                            </thead>

                        </table>
                    </div>

                </div>

            </div>
        </div>
    </div>

    <div class="modal modal-blur fade" id="modal-utilities" tabindex="-1" role="dialog" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Añadir n elementos hijos</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="row" hidden>
                        <div class="col-lg-4">
                            <div class="mb-3">
                                <label class="form-label">ID Nodo Parent</label>
                                <input id="txtIdParent" class="form-control">
                            </div>
                        </div>
                        <div class="col-lg-4">
                            <div class="mb-3">
                                <label class="form-label">ProjectID</label>
                                <input id="txtPyID" class="form-control">
                            </div>
                        </div>
                        <div class="col-lg-4">
                            <div class="mb-3">
                                <label class="form-label">Tree</label>
                                <input id="txtTree" class="form-control">
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-lg-2">
                            <div class="mb-3">
                                <label class="form-label"># Elementos</label>
                                <input id="txtCantidad" type="number" class="form-control">
                            </div>
                        </div>
                        <div class="col-lg-10">
                            <div class="mb-3">
                                <label class="form-label">Nombre base</label>
                                <input id="txtNombreBase" type="text" class="form-control">
                            </div>
                        </div>                       
                    </div>
                </div>

                <div class="modal-footer">
                    <a href="#" class="btn btn-link link-secondary" data-bs-dismiss="modal">
                        Cancelar
                    </a>
                    <a onclick="addNHijos()" class="btn btn-primary ms-auto">
                        <svg xmlns="http://www.w3.org/2000/svg"
                             class="icon" width="24" height="24"
                             viewBox="0 0 24 24" stroke-width="2"
                             stroke="currentColor"
                             fill="none" stroke-linecap="round" stroke-linejoin="round">
                            <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                            <line x1="12" y1="5" x2="12" y2="19" />
                            <line x1="5" y1="12" x2="19" y2="12" />
                        </svg>
                        Añadir
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- (Irrelevant source removed.) -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.fancytree/2.38.0/jquery.fancytree-all-deps.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.fancytree/2.38.0/jquery.fancytree.min.js"></script>

</body>

</html>