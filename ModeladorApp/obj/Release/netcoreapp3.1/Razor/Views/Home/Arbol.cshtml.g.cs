#pragma checksum "C:\Users\didie\source\repos\ModeladorApp\ModeladorApp\Views\Home\Arbol.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "d755f7d03f892d2dc632cc2f2557f2ae59be1297"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Arbol), @"mvc.1.0.view", @"/Views/Home/Arbol.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\didie\source\repos\ModeladorApp\ModeladorApp\Views\_ViewImports.cshtml"
using ModeladorApp;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\didie\source\repos\ModeladorApp\ModeladorApp\Views\_ViewImports.cshtml"
using ModeladorApp.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d755f7d03f892d2dc632cc2f2557f2ae59be1297", @"/Views/Home/Arbol.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a004a41642ca9f278fa6fb07d1d5fc2e7164305b", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Arbol : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<IEnumerable<ModeladorApp.Models.Entities.TB_PERMISOS>>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("example"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("<html>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "d755f7d03f892d2dc632cc2f2557f2ae59be12973612", async() => {
                WriteLiteral(@"
    <meta http-equiv=""content-type"" content=""text/html; charset=ISO-8859-1"" />

    <title>ON - Modelador Web</title>

    <link rel=""stylesheet"" href=""https://cdnjs.cloudflare.com/ajax/libs/jquery.fancytree/2.38.0/skin-awesome/ui.fancytree.min.css"">
    <link rel=""stylesheet"" href=""https://cdnjs.cloudflare.com/ajax/libs/jquery.fancytree/2.38.0/skin-bootstrap-n/ui.fancytree.min.css"">
    <link rel=""stylesheet"" href=""https://cdnjs.cloudflare.com/ajax/libs/jquery.fancytree/2.38.0/skin-bootstrap/ui.fancytree.min.css"">
    <link rel=""stylesheet"" href=""https://cdnjs.cloudflare.com/ajax/libs/jquery.fancytree/2.38.0/skin-xp/ui.fancytree.min.css"">

    <script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.js""></script>
    <!-- This demo uses an 3rd-party, jQuery UI based context menu -->
    <link href=""//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css"" rel=""stylesheet"" />
    <script src=""//code.jquery.com/ui/1.12.1/jquery-ui.min.js""></script>
    <!-- jquery-contextmenu (https:");
                WriteLiteral(@"//github.com/mar10/jquery-ui-contextmenu/) -->
    <script src=""//cdn.jsdelivr.net/npm/ui-contextmenu/jquery.ui-contextmenu.min.js""></script>

    <style type=""text/css"">
        .ui-menu {
            width: 180px;
            font-size: 63%;
        }

            .ui-menu kbd {
                /* Keyboard shortcuts for ui-contextmenu titles */
                float: right;
            }
        /* custom alignment (set by 'renderColumns'' event) */
        td.alignRight {
            text-align: right;
        }

        td.alignCenter {
            text-align: center;
        }

        td input[type=""input""] {
            width: 40px;
        }

        /*scroll horizontal para ver las columnas que van añadiendo a derecha*/
        div.tab-pane {
            overflow: auto;
            white-space: nowrap;
        }
    </style>

    <script type=""text/javascript"">

        window.onload = loadTree();

        var CLIPBOARD = null;
        var tempPyId; // servirá pa");
                WriteLiteral(@"ra deshacernos de la vista del proyecto.

        var pySelected; //servira para identificar los valores de las cajitas por el id del tree elegido.

        async function loadTree(vIdProject, vPermiso) {

            var treeReach; //la que rendizará los datos en la tabla.
            var data; // la que contendra la data de la función asyncrona.

            //console.log(vPermiso);

            if (typeof (vIdProject) === 'undefined' || vIdProject == 0) {

                data = await funGetMasterData()
                treeReach = ""tree_0"";

                pySelected = 0;
            } else {
                data = await funGetPyFromUsuario(vIdProject)
                treeReach = ""tree_"" + vIdProject;
                tempPyId = vIdProject;

                pySelected = vIdProject;
            }

            if (data.length >= 1) {

                $(""#loader"").hide();

                if (typeof (vIdProject) === 'undefined' || vIdProject == 0) {

                    $(""#proy");
                WriteLiteral(@"ecto_"" + tempPyId).removeClass('active');
                    $('#proyecto_0').attr('class', ""tab-pane active"");

                } else {

                    $(""#proyecto_0"").removeClass('active');
                    $('#proyecto_' + vIdProject).attr('class', ""tab-pane active"");
                }

                $(function () {

                    $(""#"" + treeReach).fancytree({

                        titlesTabbable: true, // Add all node titles to TAB chain
                        quicksearch: true, // Jump to nodes when pressing first character
                        source: data,
                        // Llamada cada vez que se expande un nodo LAZY.
                        lazyLoad: function (event, data) {

                            var node = data.node;     //obtenemos el nodo
                            /*console.log(node.data.id);*/ // obtenemos el id para mandarlo como parent
                            //console.log(node.data.parentId)

                            da");
                WriteLiteral(@"ta.result = {
                                url: ""/Home/funGetSubLvls"",
                                data: { parent: node.data.id },
                                cache: false
                            };
                        },

                        extensions: [""edit"", ""dnd5"", ""table"", ""gridnav""],

                        dnd5: {
                            preventVoidMoves: true,
                            preventRecursion: true,
                            autoExpandMS: 400,
                            dragStart: function (node, data) {


                                //function saveData(node.data.id);

                                return true;
                            },
                            dragEnter: function (node, data) {
                                // return [""before"", ""after""];
                                return true;
                            },
                            dragDrop: function (node, data) {
                          ");
                WriteLiteral(@"      data.otherNode.moveTo(node, data.hitMode);
                            },
                        },
                        edit: {
                            triggerStart: [""f2"", ""shift+click"", ""mac+enter""],
                            close: function (event, data) {

                                if (data.save && data.isNew) {
                                    // Quick-enter: add new nodes until we hit [enter] on an empty title

                                    $(""#tree"").trigger(""nodeCommand"", {
                                        cmd: ""addSibling"",
                                    });

                                    //console.log(""Se presionó ENTER"");
                                    //console.log(""------------------->>"");
                                    //console.log(data.node.title); //enviar como title
                                    //console.log(data.node.parent.data.id) //enviar como parent id
                                    //console.log(d");
                WriteLiteral(@"ata.node.parent.data.proyectoId) //enviar como proyectoId

                                    //------------------------>>AJAX GRABAR NVO NODO
                                    //console.log(data.node.parent.data);
                                    if (typeof (data.node.parent.data.parentId) === 'undefined') {

                                        Swal.fire('ADVERTENCIA', 'Intentas agregar un nodo hermano a la raiz del Árbol, aparecerá en la vista temporal, mas no se guardarán los cambios.', 'warning')

                                    } else if (vPermiso == ""EDITOR"") {
                                        $.ajax({
                                            type: ""POST"",
                                            dataType: ""json"",
                                            url: ""/Home/funInsertLvl"",
                                            data: {
                                                ""titulo"": data.node.title,
                                                ""paren");
                WriteLiteral(@"t"": data.node.parent.data.id,
                                                ""projectId"": data.node.parent.data.proyectoId
                                            },
                                            success: function (response) {
                                                //console.log(response);
                                            },
                                        });
                                        //------------------------>>AJAX GRABAR NVO NODO
                                        data.node.parent.resetLazy() //Recarga de nodo padre para obtener los ids de la data creada.
                                    } else {

                                        Swal.fire('ADVERTENCIA', 'Puedes editar el proyecto en su respectiva pestaña EDITOR, si tienes el permiso correspondiente.', 'warning')
                                    }
                                }
                            },
                        },
                        ");
                WriteLiteral(@"table: {
                            indentation: 20,
                            nodeColumnIdx: 1,
                            //checkboxColumnIdx: 0, //para poner checkboxes en la columna 1
                        },
                        gridnav: {
                            autofocusInput: false,
                            handleCursorKeys: true,
                        },
                        createNode: function (event, data) {
                            var node = data.node,
                                $tdList = $(node.tr).find("">td"");

                            //console.log(""Desglose de nodo..."");

                            // Span the remaining columns if it's a folder.
                            // We can do this in createNode instead of renderColumns, because
                            // the `isFolder` status is unlikely to change later
                            if (node.isFolder()) {
                                $tdList
                                 ");
                WriteLiteral(@"   .eq(2)
                                    .prop(""colspan"", 6)
                                    .nextAll()
                                    .remove();
                            }
                        },
                        renderColumns: function (event, data) {
                            var node = data.node,
                                $tdList = $(node.tr).find("">td"");

                            //console.log(data);
                            // (Index #0 is rendered by fancytree by adding the checkbox)
                            // Set column #1 info from node data:
                            $tdList.eq(0).text(node.getIndexHier());
                            // (Index #2 is rendered by fancytree)

                            //---------------------------------------------------------->>>

                            // 50 cajas para nombres de  columnas.
                            var colName = """";

                            for (i = 1; i <= 50; i++) {");
                WriteLiteral(@"

                                $('#' + treeReach + '_th' + i).remove(); //removemos para que no se vuelvan a crear.
                                colName = colName + '<th id=""' + treeReach + '_th' + i + '"" ><input id=""' + treeReach + '_colname' + i + '"" type=""text"" placeholder=""col nombre ' + i + '"" disabled></th>';
                            }
                            $('#head_' + treeReach).append(colName).fadeIn(300000);


                            //console.log(node.data.id);
                            //---------> obtener los datos de la tabla TB_NIVEL_INFO segun el id.
                            var info = funGetInfo(node.data.id)
                            info.then(function (result) {                                

                                // Si la longitud del resultado es distinta de 0 hay datos.
                                if (result.length != 0) {

                                    var m = 2;

                                    for (n = 0; n <= result");
                WriteLiteral(@".length - 1; n++) {

                                        for (i = 2; i <= 51; i++) {

                                            $tdList.eq(m).html('<input type=""text"" id=""' + treeReach + '_colvalue' + result[n].infoID + '"" value=""' + result[n].informacion + '"" onchange=""insertOrUpdateInfoGrilla(`tree_' + pySelected + '`,`' + result[n].infoID + '`,`' + 0 + '`,`' + 0 + '`,`' + vPermiso + '`)"">');

                                        }

                                        m = m + 1;

                                        for (j = m; j <= 51; j++) {

                                            $tdList.eq(j).html('<input id=""' + treeReach + '_colvalue_' + j + '_' + node.data.id + '"" onchange=""insertOrUpdateInfoGrilla(`tree_' + pySelected + '`,`' + 0 + '`,`' + j + '`,`' + node.data.id + '`,`' + vPermiso + '`)"" type=""text""/>');

                                        }
                                    }
                                } else { // Sino no hay ningun dato en las caj");
                WriteLiteral(@"as de un arbol. crear las cajas desde 0

                                    console.log(""Construir desde 0"");
                                    for (k = 2; k <= 51; k++) {

                                        $tdList.eq(k).html('<input id=""' + treeReach + '_colvalue_' + k + '_' + node.data.id + '"" onchange=""insertOrUpdateInfoGrilla(`tree_' + pySelected + '`,`' + 0 + '`,`' + k + '`,`' + node.data.id + '`,`' + vPermiso + '`)"" type=""text""/>');

                                    }
                                }

                            });
                            // Podemos setear la información en la columna 2 (la que continua al titulo.)
                            //$tdList.eq(2).find(""input"").val(""hola"");
                            //$tdList.eq(2).html('<input type=""text"" value=""' + node.data.id + '"">');
                        },
                        modifyChild: function (event, data) {
                            data.tree.info(event.type, data);

                 ");
                WriteLiteral(@"           //console.log(data.childNode.data.id);
                            //console.log(data.childNode.title); //nombre a actualizar
                            //console.log(""------------>>"")

                            if (data.node.parent != null) {
                                //console.log(""Tiene parent"")
                                //Buscar que solo actualice nodos cuando tienen un id
                                try {
                                    if (data.childNode.data.id != null && vPermiso == ""EDITOR"") {
                                        //console.log(""entro al update"")
                                        //------------------------>>AJAX Actualizar Nombre de Nodos hijos
                                        $.ajax({
                                            type: ""POST"",
                                            dataType: ""json"",
                                            url: ""/Home/funUpdateLvlName"",
                                            ");
                WriteLiteral(@"data: {
                                                ""Id"": data.childNode.data.id,
                                                ""nombre"": data.childNode.title,
                                            },
                                            success: function (response) {
                                                //console.log(response);
                                            },
                                        });
                                        //------------------------>>AJAX Actualizar Nombre de Nodos hijos
                                    }
                                } catch (error) {
                                    //console.log(""entro al error"")
                                    //console.error(error);
                                }

                            } else if (data.childNode.data.id != null && vPermiso == ""EDITOR"") {
                                //console.log(""No se puede realizar nada sin nodo padre."");
         ");
                WriteLiteral(@"                       //console.log(data.childNode.data.id) //id para actualizar nombre del nodo padre
                                //console.log(data.childNode.title) //nuevo titulo de nodo padre.

                                //------------------------>>AJAX Actualizar Nombre de Nodo Padre
                                $.ajax({
                                    type: ""POST"",
                                    dataType: ""json"",
                                    url: ""/Home/funUpdateLvlName"",
                                    data: {
                                        ""Id"": data.childNode.data.id,
                                        ""nombre"": data.childNode.title,
                                    },
                                    success: function (response) {
                                        //console.log(response);
                                    },
                                });
                                //------------------------>>AJAX");
                WriteLiteral(@" Actualizar Nombre de Nodo Padre

                            }

                        },
                    })
                        .on(""nodeCommand"", function (event, data) {
                            // Custom event handler that is triggered by keydown-handler and
                            // context menu:
                            var refNode,
                                moveMode,
                                tree = $.ui.fancytree.getTree(this),
                                node = tree.getActiveNode();

                            //console.log(""--------------------->>Add"")
                            //console.log(node.data.id) //enviar como parent id
                            //console.log(node.childNode) //enviar como parent id
                            //console.log(""--------------------->>Add"")

                            switch (data.cmd) {
                                case ""addChild"":
                                case ""addSibling"":
            ");
                WriteLiteral(@"                    //console.log(""------------>>"")
                                //console.log(data.cmd)
                                case ""indent"":
                                case ""moveDown"":
                                case ""moveUp"":
                                case ""outdent"":

                                case ""remove"":
                                    tree.applyCommand(data.cmd, node);

                                    if (data.cmd == ""remove"" && vPermiso == ""EDITOR"") {

                                        //console.log(node.data.id); // id a eliminar padre e hijos.
                                        //------------------------>>AJAX Eliminar Nivel Padre e Hijos
                                        $.ajax({
                                            type: ""POST"",
                                            dataType: ""json"",
                                            url: ""/Home/funDeleteLvlAndSublvls"",
                                            d");
                WriteLiteral(@"ata: {
                                                ""Id"": node.data.id,
                                            },
                                            success: function (response) {
                                                //console.log(response);
                                            },
                                        });
                                        //------------------------>>AJAX Eliminar Nivel Padre e Hijos
                                    };

                                    break;

                                case ""rename"":
                                    tree.applyCommand(data.cmd, node);

                                    break;
                                case ""cut"":
                                    CLIPBOARD = { mode: data.cmd, data: node };
                                    break;
                                case ""copy"":
                                    CLIPBOARD = {
                                ");
                WriteLiteral(@"        mode: data.cmd,
                                        data: node.toDict(true, function (dict, node) {
                                            delete dict.key;
                                        }),
                                    };
                                    break;
                                case ""clear"":
                                    CLIPBOARD = null;
                                    break;
                                case ""paste"":
                                    if (CLIPBOARD.mode === ""cut"") {
                                        // refNode = node.getPrevSibling();
                                        CLIPBOARD.data.moveTo(node, ""child"");
                                        CLIPBOARD.data.setActive();
                                    } else if (CLIPBOARD.mode === ""copy"") {
                                        node.addChildren(
                                            CLIPBOARD.data
                                    ");
                WriteLiteral(@"    ).setActive();
                                    }
                                    break;
                                case ""showgrid"":
                                    //tree.applyCommand(data.cmd, node);
                                    console.log(""Mostrar columnas"");
                                    console.log(node)
                                    //console.log(node.data.id); // id del nodo.
                                    //addColumn(treeReach, node.data.id);
                                    break;
                                case ""hidegrid"":
                                    //tree.applyCommand(data.cmd, node);
                                    console.log(""ocultar columnas"");
                                    console.log(node)
                                    //console.log(node.data.id); // id del nodo.
                                    //addColumn(treeReach, node.data.id);
                                    break;
                     ");
                WriteLiteral(@"           case ""newcolumn"":
                                    //tree.applyCommand(data.cmd, node);
                                    console.log(""Nueva columna"");
                                    console.log(node)
                                    //console.log(node.data.id); // id del nodo.
                                    //addColumn(treeReach, node.data.id);
                                    break;
                                default:
                                    alert(""Unhandled command: "" + data.cmd);
                                    return;
                            }
                        })
                        .on(""keydown"", function (e) {
                            var cmd = null;

                            // console.log(e.type, $.ui.fancytree.eventToString(e));
                            switch ($.ui.fancytree.eventToString(e)) {
                                case ""ctrl+shift+n"":
                                case ""meta+shift+n"": // mac");
                WriteLiteral(@": cmd+shift+n
                                    cmd = ""addChild"";
                                    break;
                                case ""ctrl+c"":
                                case ""meta+c"": // mac
                                    cmd = ""copy"";
                                    break;
                                case ""ctrl+v"":
                                case ""meta+v"": // mac
                                    cmd = ""paste"";
                                    break;
                                case ""ctrl+x"":
                                case ""meta+x"": // mac
                                    cmd = ""cut"";
                                    break;
                                case ""ctrl+n"":
                                case ""meta+n"": // mac
                                    cmd = ""addSibling"";
                                    break;
                                case ""del"":
                                case ""meta+backspace"": // mac
    ");
                WriteLiteral(@"                                cmd = ""remove"";
                                    break;
                                // case ""f2"":  // already triggered by ext-edit pluging
                                //   cmd = ""rename"";
                                //   break;
                                case ""ctrl+up"":
                                case ""ctrl+shift+up"": // mac
                                    cmd = ""moveUp"";
                                    break;
                                case ""ctrl+down"":
                                case ""ctrl+shift+down"": // mac
                                    cmd = ""moveDown"";
                                    break;
                                case ""ctrl+right"":
                                case ""ctrl+shift+right"": // mac
                                    cmd = ""indent"";
                                    break;
                                case ""ctrl+left"":
                                case ""ctrl+shift+left"": ");
                WriteLiteral(@"// mac
                                    cmd = ""outdent"";
                            }
                            if (cmd) {
                                $(this).trigger(""nodeCommand"", { cmd: cmd });
                                return false;
                            }
                        });

                    /*
                     * Tooltips
                     */
                    // $(""#tree"").tooltip({
                    //   content: function () {
                    //     return $(this).attr(""title"");
                    //   }
                    // });

                    /*
                     * Context menu (https://github.com/mar10/jquery-ui-contextmenu)
                     */
                    $(""#"" + treeReach).contextmenu({
                        delegate: ""span.fancytree-node"",
                        menu: [
                            {
                                title: ""Editar <kbd>[F2]</kbd>"",
                                cm");
                WriteLiteral(@"d: ""rename"",
                                uiIcon: ""ui-icon-pencil"",
                            },
                            {
                                title: ""Eliminar <kbd>[Del]</kbd>"",
                                cmd: ""remove"",
                                uiIcon: ""ui-icon-trash"",
                            },
                            { title: ""----"" },
                            {
                                title: ""Nuevo Hermano <kbd>[Ctrl+N]</kbd>"",
                                cmd: ""addSibling"",
                                uiIcon: ""ui-icon-plus"",
                            },
                            {
                                title: ""Nuevo Hijo <kbd>[Ctrl+Shift+N]</kbd>"",
                                cmd: ""addChild"",
                                uiIcon: ""ui-icon-arrowreturn-1-e"",
                            }, {
                                title: ""Mostrar Grilla"",
                                cmd: ""showgrid"",
             ");
                WriteLiteral(@"               },
                            {
                                title: ""Ocultar Grilla"",
                                cmd: ""hidegrid"",
                            },
                            {
                                title: ""Nueva Columna"",
                                cmd: ""newcolumn"",
                                uiIcon: ""ui-icon-plus"",
                            },
                            //{ title: ""----"" },
                            //{
                            //    title: ""Cortar <kbd>Ctrl+X</kbd>"",
                            //    cmd: ""cut"",
                            //    uiIcon: ""ui-icon-scissors"",
                            //},
                            //{
                            //    title: ""Copiar <kbd>Ctrl-C</kbd>"",
                            //    cmd: ""copy"",
                            //    uiIcon: ""ui-icon-copy"",
                            //},
                            //{
                            //  ");
                WriteLiteral(@"  title: ""Pegar as child<kbd>Ctrl+V</kbd>"",
                            //    cmd: ""paste"",
                            //    uiIcon: ""ui-icon-clipboard"",
                            //    disabled: true,
                            //},

                        ],
                        beforeOpen: function (event, ui) {
                            var node = $.ui.fancytree.getNode(ui.target);
                            $(""#"" + treeReach).contextmenu(
                                ""enableEntry"",
                                ""paste"",
                                !!CLIPBOARD
                            );
                            node.setActive();
                        },
                        select: function (event, ui) {
                            var that = this;
                            // delay the event, so the menu can close and the click event does
                            // not interfere with the edit control
                            setTimeout(function");
                WriteLiteral(@" () {
                                $(that).trigger(""nodeCommand"", { cmd: ui.cmd });
                            }, 100);
                        },
                    });

                }); //---------> End Fancytree..

            } else {

                //console.log(""proyecto de usuario"");

            } //--------> End If
        }

        //---------------- carga de proyecto MASTER
        function funGetMasterData() {
            var url = ""/Home/funGetLvl"";
            return $.get(url, {}, function (data) {
                //console.log(data);
            });
        };

        //---------------- carga de proyecto de Usuario...
        function funGetPyFromUsuario(vIdProject) {
            var url = ""/Home/funGetLvlFromPyUsuario"";
            return $.get(url, { idProyecto: vIdProject }, function (data) {
                //console.log(data);
            });
        };

        //-------------------------------- para obtener la info de cada nivel...
        asy");
                WriteLiteral(@"nc function funGetInfo(lvlID) {
            return info = await funGetInfoFromDB(lvlID);
            //var info = await funGetInfoFromDB(lvlID);
            //console.log(info)
        };

        function funGetInfoFromDB(lvlID) {
            var url = ""/Home/funGetInfoFromDB"";
            return $.get(url, { lvlId: lvlID }, function (data) {
                //console.log(data);
            });
        }

        function insertOrUpdateInfoGrilla(tree, id, i, nodeId, permiso) {            


            console.log(permiso);
            if (typeof (permiso) === 'undefined' || permiso == ""VIEWER"") {

                Swal.fire('ADVERTENCIA', 'Puedes editar el proyecto en su respectiva pestaña EDITOR, si tienes el permiso correspondiente.', 'warning')

            } else {

                //tree: referencia al arbol
                //id: el id para actualizar en caso haya un registro guardado.
                //i: el contador de la caja empezando en 2 de izquierda a derecha hasta el 51");
                WriteLiteral(@"
                //nodeId: el valor del nivel del nodo en el que estamos.

                var urlToGo = """";
                var dataToGo;

                if (id > 0) {
                    console.log(""ACTUALIZAR ! "")
                    var valorCajaUpdate = $('#' + tree + '_colvalue' + id).val();

                    urlToGo = ""/Home/funUpdateInfo"";
                    dataToGo = { ""id"": id, ""informacion"": valorCajaUpdate }

                    $.ajax({
                        type: ""POST"",
                        dataType: ""json"",
                        url: urlToGo,
                        data: dataToGo,
                        success: function (response) {

                            if (response > 0) {

                                Swal.fire({
                                    toast: true,
                                    background: 'orange',
                                    icon: 'success',
                                    title: 'Información actualizada',");
                WriteLiteral(@"
                                    animation: false,
                                    position: 'bottom',
                                    showConfirmButton: false,
                                    timer: 3000,
                                    timerProgressBar: true,
                                    didOpen: (toast) => {
                                        toast.addEventListener('mouseenter', Swal.stopTimer)
                                        toast.addEventListener('mouseleave', Swal.resumeTimer)
                                    }
                                })

                            } else {

                                Swal.fire({
                                    toast: true,
                                    background: 'orange',
                                    icon: 'error',
                                    title: 'Hubo un problema',
                                    animation: false,
                                    position: ");
                WriteLiteral(@"'bottom',
                                    showConfirmButton: false,
                                    timer: 3000,
                                    timerProgressBar: true,
                                    didOpen: (toast) => {
                                        toast.addEventListener('mouseenter', Swal.stopTimer)
                                        toast.addEventListener('mouseleave', Swal.resumeTimer)
                                    }
                                })
                            }

                        },
                    });


                } else {
                    console.log(""INSERTAR ! "")

                    var valorCajaInsert = $('#' + tree + '_colvalue_' + i + ""_"" + nodeId).val();

                    urlToGo = ""/Home/funInsertInfo"";
                    dataToGo = { ""idLvl"": nodeId, ""info"": valorCajaInsert }

                    $.ajax({
                        type: ""POST"",
                        dataType: ""json"",
    ");
                WriteLiteral(@"                    url: urlToGo,
                        data: dataToGo,
                        success: function (response) {

                            if (response > 0) {

                                //removemos la funcion onchange y la volvemos a agregar solo con los parametros necesarios para la actualizacion.
                                $('#' + tree + '_colvalue_' + i + ""_"" + nodeId).removeAttr(""onchange"");
                                $('#' + tree + '_colvalue_' + i + ""_"" + nodeId).attr('onchange', ""insertOrUpdateInfoGrilla('"" + tree + ""','"" + response + ""','"" + 0 + ""','"" + 0 + ""','"" + permiso + ""')"");
                                //cambiamos el id tambien por el nuevo con solo los parametros requeridos para la actualizacion.
                                $('#' + tree + '_colvalue_' + i + ""_"" + nodeId).attr('id', tree + '_colvalue' + response);

                                Swal.fire({
                                    toast: true,
                                ");
                WriteLiteral(@"    background: 'orange',
                                    icon: 'success',
                                    title: 'Información guardada',
                                    animation: false,
                                    position: 'bottom',
                                    showConfirmButton: false,
                                    timer: 3000,
                                    timerProgressBar: true,
                                    didOpen: (toast) => {
                                        toast.addEventListener('mouseenter', Swal.stopTimer)
                                        toast.addEventListener('mouseleave', Swal.resumeTimer)
                                    }
                                })

                            } else {
                                Swal.fire({
                                    toast: true,
                                    background: 'orange',
                                    icon: 'error',
                   ");
                WriteLiteral(@"                 title: 'Hubo un problema',
                                    animation: false,
                                    position: 'bottom',
                                    showConfirmButton: false,
                                    timer: 3000,
                                    timerProgressBar: true,
                                    didOpen: (toast) => {
                                        toast.addEventListener('mouseenter', Swal.stopTimer)
                                        toast.addEventListener('mouseleave', Swal.resumeTimer)
                                    }
                                })
                            }
                        },
                    });
                }
            }
        }


        //-------------------------------- para obtener la info de cada nivel...

        function expandOrContract(vIdProyecto) {

            $(""#tree_"" + vIdProyecto).fancytree(""getRootNode"").visit(function (node) {
            ");
                WriteLiteral(@"    if (node.isExpanded() == true) {
                    node.setExpanded(false);
                } else {
                    node.setExpanded(true);
                }
            });
        }

        //Mensajito para la informacion que se puede editar proyecto
        function EdicionInfo() {

            Swal.fire('EDITOR', 'Puedes editar éste proyecto en su respectiva pestaña EDITOR, ya sea porque es tuyo o porque te concedieron dicho permiso.', 'info')

        }

        var tableToExcel = (function () {
            var uri = 'data:application/vnd.ms-excel;base64,'
                , template = '<html xmlns:o=""urn:schemas-microsoft-com:office:office"" xmlns:x=""urn:schemas-microsoft-com:office:excel"" xmlns=""http://www.w3.org/TR/REC-html40""><head><!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>{worksheet}</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]--></h");
                WriteLiteral(@"ead><body><table>{table}</table></body></html>'
                , base64 = function (s) { return window.btoa(unescape(encodeURIComponent(s))) }
                , format = function (s, c) { return s.replace(/{(\w+)}/g, function (m, p) { return c[p]; }) }
            return function (table, name) {
                if (!table.nodeType) table = document.getElementById(table)
                var ctx = { worksheet: name || 'Worksheet', table: table.innerHTML }
                window.location.href = uri + base64(format(template, ctx))
            }
        })()




        //function addColumn(tree, nodoId) {
        //    console.log(tree,nodoId)
        //    $('#' + tree + ' thead tr').append('<th id=th' + nodoId +'>Col</th>');
        //    $('#' + tree + ' tbody tr').append('<td id=td' + nodoId +'><input type=""text"" placeholder=""Ingrese algo""></td>');
        //}

    </script>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "d755f7d03f892d2dc632cc2f2557f2ae59be129745166", async() => {
                WriteLiteral(@"

    <ul class=""nav nav-tabs nav-fill"" data-bs-toggle=""tabs"">

        <li class=""nav-item"">
            <a href=""#master"" onclick=""loadTree(0)"" class=""nav-link active""
               data-bs-toggle=""tab""><strong>MASTER</strong></a>
        </li>

");
#nullable restore
#line 799 "C:\Users\didie\source\repos\ModeladorApp\ModeladorApp\Views\Home\Arbol.cshtml"
         foreach (var item in Model)
        {

#line default
#line hidden
#nullable disable
                WriteLiteral("            <li class=\"nav-item\">\r\n                <a");
                BeginWriteAttribute("href", " href=\"", 39266, "\"", 39299, 2);
                WriteAttributeValue("", 39273, "#proyecto_", 39273, 10, true);
#nullable restore
#line 802 "C:\Users\didie\source\repos\ModeladorApp\ModeladorApp\Views\Home\Arbol.cshtml"
WriteAttributeValue("", 39283, item.ProyectoID, 39283, 16, false);

#line default
#line hidden
#nullable disable
                EndWriteAttribute();
                BeginWriteAttribute("onclick", " onclick=\"", 39300, "\"", 39355, 6);
                WriteAttributeValue("", 39310, "loadTree(\'", 39310, 10, true);
#nullable restore
#line 802 "C:\Users\didie\source\repos\ModeladorApp\ModeladorApp\Views\Home\Arbol.cshtml"
WriteAttributeValue("", 39320, item.ProyectoID, 39320, 16, false);

#line default
#line hidden
#nullable disable
                WriteAttributeValue("", 39336, "\',", 39336, 2, true);
                WriteAttributeValue(" ", 39338, "\'", 39339, 2, true);
#nullable restore
#line 802 "C:\Users\didie\source\repos\ModeladorApp\ModeladorApp\Views\Home\Arbol.cshtml"
WriteAttributeValue("", 39340, item.Permiso, 39340, 13, false);

#line default
#line hidden
#nullable disable
                WriteAttributeValue("", 39353, "\')", 39353, 2, true);
                EndWriteAttribute();
                WriteLiteral(" class=\"nav-link\"\r\n                   data-bs-toggle=\"tab\">");
#nullable restore
#line 803 "C:\Users\didie\source\repos\ModeladorApp\ModeladorApp\Views\Home\Arbol.cshtml"
                                   Write(Html.DisplayFor(modelItem => item.TB_PROYECTO.NombreProyecto));

#line default
#line hidden
#nullable disable
                WriteLiteral(" (");
#nullable restore
#line 803 "C:\Users\didie\source\repos\ModeladorApp\ModeladorApp\Views\Home\Arbol.cshtml"
                                                                                                   Write(item.Permiso);

#line default
#line hidden
#nullable disable
                WriteLiteral(")</a>\r\n            </li>\r\n");
#nullable restore
#line 805 "C:\Users\didie\source\repos\ModeladorApp\ModeladorApp\Views\Home\Arbol.cshtml"
        }

#line default
#line hidden
#nullable disable
                WriteLiteral("\r\n    </ul>\r\n\r\n    <div class=\"card\">\r\n\r\n");
                WriteLiteral(@"        <div class=""card-body"" id=""loader"">
            <div class=""empty"">
                <div class=""empty-img"">
                    <img src=""https://miro.medium.com/max/875/1*CsJ05WEGfunYMLGfsT2sXA.gif"" height=""128"">
                </div>
                <p class=""empty-title"">Cargando proyectos...</p>
            </div>
        </div>
");
                WriteLiteral(@"
        <div class=""tab-content"">

            <div class=""tab-pane"" id=""proyecto_0"">

                <div class=""row align-items-center"">
                    <div class=""col-auto ms-auto d-print-none"">
                        <div class=""btn-list"">

                            <span class=""d-none d-sm-inline"">
                                <a onclick=""tableToExcel('tree_0', 'Modelador_Master')"" style=""cursor:pointer"" href=""#"" class=""btn btn-secondary"">
                                    EXCEL
                                </a>
                            </span>

                            <span class=""d-none d-sm-inline"">
                                <a onclick=""expandOrContract(0)"" class=""btn btn-secondary"">
                                    Expandir/Contraer
                                </a>
                            </span>

                            <span class=""d-none d-sm-inline"">
                                <a href=""#"" class=""btn btn-primary"" data-bs-togg");
                WriteLiteral(@"le=""modal"" data-bs-target=""#modal-new-project"">
                                    Clonar
                                </a>
                            </span>

                        </div>
                    </div>
                </div>

                <table id=""tree_0"">
                    <colgroup>
                        <col width=""2%"" />
                        <col width=""58%"" />
                        <col width=""1%"" />
                    </colgroup>
                    <thead>
                        <tr id=""head_tree_0"">
                            <th>#</th>
                            <th>Identificador - Nombre</th>

                        </tr>
                    </thead>
                    <tbody>
                        <!-- Define a row template for all invariant markup: -->
                        <tr>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></t");
                WriteLiteral(@"d>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
      ");
                WriteLiteral(@"                      <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>


                        </tr>
                    </tbody>
                </table>

            </div>

");
#nullable restore
#line 928 "C:\Users\didie\source\repos\ModeladorApp\ModeladorApp\Views\Home\Arbol.cshtml"
             foreach (var item in Model)
            {

#line default
#line hidden
#nullable disable
                WriteLiteral("                <div class=\"tab-pane\"");
                BeginWriteAttribute("id", " id=\"", 44095, "\"", 44125, 2);
                WriteAttributeValue("", 44100, "proyecto_", 44100, 9, true);
#nullable restore
#line 930 "C:\Users\didie\source\repos\ModeladorApp\ModeladorApp\Views\Home\Arbol.cshtml"
WriteAttributeValue("", 44109, item.ProyectoID, 44109, 16, false);

#line default
#line hidden
#nullable disable
                EndWriteAttribute();
                WriteLiteral(@">

                    <div class=""row align-items-center"">
                        <div class=""col-auto ms-auto d-print-none"">
                            <div class=""btn-list"">
                                <span class=""d-none d-sm-inline"">
                                    <a");
                BeginWriteAttribute("onclick", " onclick=\"", 44415, "\"", 44459, 3);
                WriteAttributeValue("", 44425, "expandOrContract(", 44425, 17, true);
#nullable restore
#line 936 "C:\Users\didie\source\repos\ModeladorApp\ModeladorApp\Views\Home\Arbol.cshtml"
WriteAttributeValue("", 44442, item.ProyectoID, 44442, 16, false);

#line default
#line hidden
#nullable disable
                WriteAttributeValue("", 44458, ")", 44458, 1, true);
                EndWriteAttribute();
                WriteLiteral(" class=\"btn btn-secondary\">\r\n                                        Expandir/Contraer\r\n                                    </a>\r\n                                </span>\r\n");
#nullable restore
#line 940 "C:\Users\didie\source\repos\ModeladorApp\ModeladorApp\Views\Home\Arbol.cshtml"
                                 if (item.Permiso == "EDITOR")
                                {

#line default
#line hidden
#nullable disable
                WriteLiteral(@"                                    <span class=""d-none d-sm-inline"">
                                        <a onclick=""EdicionInfo()"" class=""btn btn-primary"">
                                            Puedes editar este proyecto
                                        </a>
                                    </span>
");
#nullable restore
#line 947 "C:\Users\didie\source\repos\ModeladorApp\ModeladorApp\Views\Home\Arbol.cshtml"
                                }

#line default
#line hidden
#nullable disable
                WriteLiteral("                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                    <table");
                BeginWriteAttribute("id", " id=\"", 45219, "\"", 45245, 2);
                WriteAttributeValue("", 45224, "tree_", 45224, 5, true);
#nullable restore
#line 953 "C:\Users\didie\source\repos\ModeladorApp\ModeladorApp\Views\Home\Arbol.cshtml"
WriteAttributeValue("", 45229, item.ProyectoID, 45229, 16, false);

#line default
#line hidden
#nullable disable
                EndWriteAttribute();
                WriteLiteral(@">
                        <colgroup>
                            <col width=""2%"" />
                            <col width=""58%"" />
                            <col width=""1%"" />
                        </colgroup>
                        <thead>
                            <tr");
                BeginWriteAttribute("id", " id=\"", 45531, "\"", 45562, 2);
                WriteAttributeValue("", 45536, "head_tree_", 45536, 10, true);
#nullable restore
#line 960 "C:\Users\didie\source\repos\ModeladorApp\ModeladorApp\Views\Home\Arbol.cshtml"
WriteAttributeValue("", 45546, item.ProyectoID, 45546, 16, false);

#line default
#line hidden
#nullable disable
                EndWriteAttribute();
                WriteLiteral(@">
                                <th>#</th>
                                <th>Identificador - Nombre</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Define a row template for all invariant markup: -->
                            <tr>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
  ");
                WriteLiteral(@"                              <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td><");
                WriteLiteral(@"/td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                            </tr>
                        </tbody>
                    </table>

                </div>
");
#nullable restore
#line 1025 "C:\Users\didie\source\repos\ModeladorApp\ModeladorApp\Views\Home\Arbol.cshtml"
            }

#line default
#line hidden
#nullable disable
                WriteLiteral(@"
        </div>
    </div>

    <div class=""modal modal-blur fade"" id=""modal-new-project"" tabindex=""-1"" role=""dialog"" aria-hidden=""true"">
        <div class=""modal-dialog modal-lg"" role=""document"">
            <div class=""modal-content"">
                <div class=""modal-header"">
                    <h5 class=""modal-title"">Clonar Proyecto MASTER</h5>
                    <button type=""button"" class=""btn-close"" data-bs-dismiss=""modal"" aria-label=""Close""></button>
                </div>
                <div class=""modal-body"">

                    <div class=""row"">
                        <div class=""col-lg-12"">
                            <div class=""mb-3"">
                                <label class=""form-label"">Nombre</label>
                                <input id=""txtPyNombre"" type=""text"" class=""form-control""
                                       name=""example-text-input"" placeholder=""Escribe un Nombre para tu Proyecto"">
                            </div>
                        </di");
                WriteLiteral(@"v>

                        <div class=""col-lg-12"">
                            <div>
                                <label class=""form-label"">Describe tu proyecto</label>
                                <textarea id=""txtPyDescripcion"" class=""form-control"" rows=""8""></textarea>
                            </div>
                        </div>


                    </div>
                </div>

                <div class=""modal-footer"">
                    <a href=""#"" class=""btn btn-link link-secondary"" data-bs-dismiss=""modal"">
                        Cancelar
                    </a>
                    <a onclick=""createProject()"" class=""btn btn-primary ms-auto"">
                        <svg xmlns=""http://www.w3.org/2000/svg""
                             class=""icon"" width=""24"" height=""24""
                             viewBox=""0 0 24 24"" stroke-width=""2""
                             stroke=""currentColor""
                             fill=""none"" stroke-linecap=""round"" stroke-linejoin=""r");
                WriteLiteral(@"ound"">
                            <path stroke=""none"" d=""M0 0h24v24H0z"" fill=""none"" />
                            <line x1=""12"" y1=""5"" x2=""12"" y2=""19"" />
                            <line x1=""5"" y1=""12"" x2=""19"" y2=""12"" />
                        </svg>
                        Clonar
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- (Irrelevant source removed.) -->
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery.fancytree/2.38.0/jquery.fancytree-all-deps.min.js""></script>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery.fancytree/2.38.0/jquery.fancytree.min.js""></script>

");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n</html>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<IEnumerable<ModeladorApp.Models.Entities.TB_PERMISOS>> Html { get; private set; }
    }
}
#pragma warning restore 1591
