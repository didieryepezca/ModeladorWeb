#pragma checksum "C:\Users\didie\source\repos\ModeladorApp\ModeladorApp\Views\Home\Arbol.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "16f7ef06750d6ef1c531f6c2946b92076f0843b4"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Arbol), @"mvc.1.0.view", @"/Views/Home/Arbol.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\didie\source\repos\ModeladorApp\ModeladorApp\Views\_ViewImports.cshtml"
using ModeladorApp;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\didie\source\repos\ModeladorApp\ModeladorApp\Views\_ViewImports.cshtml"
using ModeladorApp.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"16f7ef06750d6ef1c531f6c2946b92076f0843b4", @"/Views/Home/Arbol.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a004a41642ca9f278fa6fb07d1d5fc2e7164305b", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Arbol : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<IEnumerable<ModeladorApp.Models.Entities.TB_PERMISOS>>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/fancytree/jquery.fancytree.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/fancytree/jquery.fancytree.edit.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/fancytree/jquery.fancytree.dnd5.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/fancytree/jquery.fancytree.table.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/fancytree/jquery.fancytree.gridnav.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("example"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("<html>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "16f7ef06750d6ef1c531f6c2946b92076f0843b45659", async() => {
                WriteLiteral(@"
    <meta http-equiv=""content-type"" content=""text/html; charset=ISO-8859-1"" />

    <title>ON - Modelador Web</title>

    <link rel=""stylesheet"" href=""https://cdnjs.cloudflare.com/ajax/libs/jquery.fancytree/2.38.0/skin-awesome/ui.fancytree.min.css"">
    <link rel=""stylesheet"" href=""https://cdnjs.cloudflare.com/ajax/libs/jquery.fancytree/2.38.0/skin-bootstrap-n/ui.fancytree.min.css"">
    <link rel=""stylesheet"" href=""https://cdnjs.cloudflare.com/ajax/libs/jquery.fancytree/2.38.0/skin-bootstrap/ui.fancytree.min.css"">
    <link rel=""stylesheet"" href=""https://cdnjs.cloudflare.com/ajax/libs/jquery.fancytree/2.38.0/skin-xp/ui.fancytree.min.css"">

    <script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.js""></script>
    <!-- This demo uses an 3rd-party, jQuery UI based context menu -->
    <link href=""//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css"" rel=""stylesheet"" />
    <script src=""//code.jquery.com/ui/1.12.1/jquery-ui.min.js""></script>
    <!-- jquery-contextmenu (https:");
                WriteLiteral(@"//github.com/mar10/jquery-ui-contextmenu/) -->
    <script src=""//cdn.jsdelivr.net/npm/ui-contextmenu/jquery.ui-contextmenu.min.js""></script>

    <style type=""text/css"">
        .ui-menu {
            width: 180px;
            font-size: 63%;
        }

            .ui-menu kbd {
                /* Keyboard shortcuts for ui-contextmenu titles */
                float: right;
            }
        /* custom alignment (set by 'renderColumns'' event) */
        td.alignRight {
            text-align: right;
        }

        td.alignCenter {
            text-align: center;
        }

        td input[type=""input""] {
            width: 40px;
        }

        /*scroll horizontal para ver las columnas que van añadiendo a derecha*/
        div.tab-pane {
            overflow: auto;
            white-space: nowrap;
        }

        #tblAdminSecondInput .naranja {
            background-color: orange;
        }


    </style>

    <script type=""text/javascript"">

        ");
                WriteLiteral("var firstPyID = \'");
#nullable restore
#line 58 "C:\Users\didie\source\repos\ModeladorApp\ModeladorApp\Views\Home\Arbol.cshtml"
                    Write(ViewBag.firstPyID);

#line default
#line hidden
#nullable disable
                WriteLiteral("\';\r\n        var permiso = \'");
#nullable restore
#line 59 "C:\Users\didie\source\repos\ModeladorApp\ModeladorApp\Views\Home\Arbol.cshtml"
                  Write(ViewBag.permiso);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"';

        window.onload = loadTree(firstPyID, permiso);

        var CLIPBOARD = null;
        var tempPyId; // servirá para deshacernos de la vista del proyecto.

        var pySelected; //servira para identificar los valores de las cajitas por el id del tree elegido.

        async function loadTree(firstPyID, vPermiso) {

            var treeReach; //la que rendizará los datos en la tabla.
            var data; // la que contendra la data de la función asyncrona.

            //console.log(vPermiso);            
            if (firstPyID != 0) {
                
                data = await funGetPyFromUsuario(firstPyID)
                treeReach = ""tree_"" + firstPyID;
                tempPyId = firstPyID;               

                pySelected = firstPyID;

            } else {

                data = await funGetMasterData()
                treeReach = ""tree_0"";

                pySelected = 0;
            }

            if (data.length >= 1) {

                $(""#");
                WriteLiteral(@"loader"").hide();

                if (firstPyID != 0) {

                    $(""#proyecto_0"").removeClass('active');
                    $('#proyecto_' + firstPyID).attr('class', ""tab-pane active"");

                } else {
                   
                    $(""#proyecto_"" + tempPyId).removeClass('active');
                    $('#proyecto_0').attr('class', ""tab-pane active"");
                }

                $(function () {

                    $(""#"" + treeReach).fancytree({

                        //-->> Para colocar los checkboxes en la prima columna (columna indice 0) y además agregar el modo de selección en cascada.
                        checkbox: true,
                        selectMode: 3,
                        //---->>

                        titlesTabbable: true, // Add all node titles to TAB chain
                        quicksearch: true, // Jump to nodes when pressing first character
                        source: data,
                        // Llamada cad");
                WriteLiteral(@"a vez que se expande un nodo LAZY.
                        lazyLoad: function (event, data) {

                            var node = data.node;     //obtenemos el nodo
                            /*console.log(node.data.id);*/ // obtenemos el id para mandarlo como parent
                            //console.log(node.data.parentId)

                            data.result = {
                                url: ""/Home/funGetSubLvls"",
                                data: { parent: node.data.id },
                                cache: false
                            };
                        },

                        ////Evento Expand para capturar algo cuando se expande el arbol
                        //expand: function (data) {
                        //    console.log(""expandiendo"");
                        //    console.log(data);
                        //    $("".OrgDataTreeNotChecked"").children("".fancytree-title"").css({ 'color': 'red' });
                        //},

      ");
                WriteLiteral(@"                  extensions: [""edit"", ""dnd5"", ""table"", ""gridnav""],

                        dnd5: {
                            preventVoidMoves: true,
                            preventRecursion: true,
                            autoExpandMS: 400,
                            dragStart: function (node, data) {


                                //function saveData(node.data.id);
                                //console.log(node.data.id); //id del elemento a actualizar
                                //console.log(data); //id del nuevo parent

                                return true;
                            },
                            dragEnter: function (node, data) {
                                // return [""before"", ""after""];
                                return true;
                            },
                            dragDrop: function (node, data) {
                                data.otherNode.moveTo(node, data.hitMode);
                            },
    ");
                WriteLiteral(@"                    },
                        edit: {
                            triggerStart: [""f2"", ""shift+click"", ""mac+enter""],
                            close: function (event, data) {
                                
                                //console.log(data)
                                if (data.save && data.isNew) {
                                    // Quick-enter: add new nodes until we hit [enter] on an empty title

                                    $(""#tree"").trigger(""nodeCommand"", {
                                        cmd: ""addSibling"",
                                    });

                                    //console.log(""Se presionó ENTER"");
                                    //console.log(""------------------->>"");
                                    //console.log(data.node.title); //enviar como title
                                    //console.log(data.node.parent.data.id) //enviar como parent id
                                    //console.log(da");
                WriteLiteral(@"ta.node.parent.data.proyectoId) //enviar como proyectoId
                                    //console.log(data.node);
                                    //------------------------>>AJAX GRABAR NVO NODO
                                    //console.log(data.node.parent.data);
                                    if (typeof (data.node.parent.data.parentId) === 'undefined') {

                                        Swal.fire('ADVERTENCIA', 'Intentas agregar un nodo hermano a la raiz del Árbol, aparecerá en la vista temporal, mas no se guardarán los cambios.', 'warning')

                                    } else if (vPermiso == ""EDITOR"") {
                                        $.ajax({
                                            type: ""POST"",
                                            dataType: ""json"",
                                            url: ""/Home/funInsertLvl"",
                                            data: {
                                                ""titulo"": data.node.ti");
                WriteLiteral(@"tle,
                                                ""descripcion"": data.datadescripcion,
                                                ""parent"": data.node.parent.data.id,
                                                ""projectId"": data.node.parent.data.proyectoId
                                            },
                                            success: function (response) {
                                                //console.log(response);
                                            },
                                        });
                                        //------------------------>>AJAX GRABAR NVO NODO
                                        data.node.parent.resetLazy() //Recarga de nodo padre para obtener los ids de la data creada.
                                    } else {

                                        Swal.fire('ADVERTENCIA', 'Puedes editar el proyecto en su respectiva pestaña EDITOR, si tienes el permiso correspondiente.', 'warning')
            ");
                WriteLiteral(@"                        }
                                } else if (data.isNew == false && data.datatitulo != """") {                                    
                                    //console.log(data.node.data.id)
                                    if (vPermiso == ""EDITOR"") {
                                        //console.log(data)
                                        //------------------------>>AJAX Actualizar Nombre de Nodos
                                        $.ajax({
                                            type: ""POST"",
                                            dataType: ""json"",
                                            url: ""/Home/funUpdateLvlNameDescription"",
                                            data: {
                                                ""Id"": data.node.data.id,
                                                ""title"": data.node.title,
                                                ""description"": data.datadescripcion,
                         ");
                WriteLiteral(@"                   },
                                            success: function (response) {
                                                //console.log(response);
                                                if (data.node.data.parentId != 0) {
                                                    data.node.parent.resetLazy()                                                                                        
                                                } else {
                                                    var datosReload = funGetPyFromUsuario(firstPyID);                                                    
                                                    datosReload.then(function (dataReload) {                                                        
                                                        $.ui.fancytree.getTree().reload(dataReload);
                                                    });                                                    
                      ");
                WriteLiteral(@"                          }
                                            },
                                        });
                                        //------------------------>>AJAX Actualizar Nombre de Nodos
                                    }                                    
                                }
                            },
                        },
                        table: {
                            indentation: 20,
                            nodeColumnIdx: 1,
                            checkboxColumnIdx: 0, //para poner checkboxes en la prima columna (columna indice 0)
                        },
                        gridnav: {
                            autofocusInput: false,
                            handleCursorKeys: true,
                        },
                        createNode: function (event, data) {
                            var node = data.node,
                                $tdList = $(node.tr).find("">td"");

           ");
                WriteLiteral(@"                 //console.log(""Desglose de nodo..."");

                            // Span the remaining columns if it's a folder.
                            // We can do this in createNode instead of renderColumns, because
                            // the `isFolder` status is unlikely to change later
                            if (node.isFolder()) {
                                $tdList
                                    .eq(2)
                                    .prop(""colspan"", 6)
                                    .nextAll()
                                    .remove();
                            }
                        },
                        renderColumns: function (event, data) {
                            var node = data.node,
                                $tdList = $(node.tr).find("">td"");

                            //console.log(node.tr.rowIndex);
                            //-->codigo para colocar el indexador en la primera columna (columna indice 0)
        ");
                WriteLiteral(@"                    //if (node.tr.rowIndex >= 2) { 
                            //    $tdList.eq(0).text(node.getIndexHier());
                            //}

                            //$tdList.eq(2).text(node.data.fechaCreacion);
                            //console.log(node.data.fechaCreacion);
                            //console.log(node.data.id); // id único de cada elemento del arbol.
                            var estilos = getStyles(node.data.id);//-------> estilos del árbol
                            estilos.then(function (estilosresponse) {

                                if (estilosresponse.length != 0) {

                                    for (s = 0; s <= estilosresponse.length - 1; s++) {

                                        if (estilosresponse[s].style == 'bold' && estilosresponse[s].campo == ""titulo"") {                                                                            
                                            node.span.children[2].children[0].style.font");
                WriteLiteral(@"Weight = estilosresponse[s].style; //titulo                                         
                                        } else if (estilosresponse[s].style == 'bold' && estilosresponse[s].campo == ""descripcion"") {                                            
                                            node.span.children[2].children[1].style.fontWeight = estilosresponse[s].style;; //descripcion
                                        } else if (estilosresponse[s].style == 'italic' && estilosresponse[s].campo == ""titulo"") {                                            
                                            node.span.children[2].children[0].style.fontStyle = estilosresponse[s].style; //LETRA CURSIVA.
                                        } else if (estilosresponse[s].style == 'italic' && estilosresponse[s].campo == ""descripcion"") {
                                            node.span.children[2].children[1].style.fontStyle = estilosresponse[s].style; //LETRA CURSIVA.
                           ");
                WriteLiteral(@"             }

                                        else if (estilosresponse[s].style == 'Lime') {
                                            node.span.style.backgroundColor = estilosresponse[s].style;  //SUBRAYADO VERDE.
                                        } else if (estilosresponse[s].style == 'Aqua') {
                                            node.span.style.backgroundColor = estilosresponse[s].style;  //SUBRAYADO AZUL.
                                        } else if (estilosresponse[s].style == 'Yellow') {
                                            node.span.style.backgroundColor = estilosresponse[s].style;  //SUBRAYADO AMARILLO.
                                        } else if (estilosresponse[s].style == 'Fuchsia') {
                                            node.span.style.backgroundColor = estilosresponse[s].style;  //SUBRAYADO FUSCIA.
                                        } else if (estilosresponse[s].style == 'Red') {
                                            node.sp");
                WriteLiteral(@"an.style.backgroundColor = estilosresponse[s].style;  //ELEMENTO CARPETA.
                                        } else if (estilosresponse[s].style == 'true') {                                          
                                            node.folder = true;  //ICONO DEL FOLDER.
                                        }

                                        else if (estilosresponse[s].style == 'silver' && estilosresponse[s].campo == ""titulo"") {
                                            node.span.children[2].children[0].style.color = estilosresponse[s].style;; //titulo
                                        } else if (estilosresponse[s].style == 'lightslategray' && estilosresponse[s].campo == ""titulo"") {
                                            node.span.children[2].children[0].style.color = estilosresponse[s].style;; //titulo
                                        } else if (estilosresponse[s].style == 'grey' && estilosresponse[s].campo == ""titulo"") {
                            ");
                WriteLiteral(@"                node.span.children[2].children[0].style.color = estilosresponse[s].style;; //titulo
                                        } else if (estilosresponse[s].style == 'dimgrey' && estilosresponse[s].campo == ""titulo"") {
                                            node.span.children[2].children[0].style.color = estilosresponse[s].style;; //titulo
                                        } else if (estilosresponse[s].style == 'dark' && estilosresponse[s].campo == ""titulo"") {
                                            node.span.children[2].children[0].style.color = estilosresponse[s].style;; //titulo
                                        } else if (estilosresponse[s].style == 'blue' && estilosresponse[s].campo == ""titulo"") {
                                            node.span.children[2].children[0].style.color = estilosresponse[s].style;; //titulo
                                        } else if (estilosresponse[s].style == 'azure' && estilosresponse[s].campo == ""titulo"") {
            ");
                WriteLiteral(@"                                node.span.children[2].children[0].style.color = estilosresponse[s].style;; //titulo
                                        } else if (estilosresponse[s].style == 'indigo' && estilosresponse[s].campo == ""titulo"") {
                                            node.span.children[2].children[0].style.color = estilosresponse[s].style;; //titulo
                                        } else if (estilosresponse[s].style == 'purple' && estilosresponse[s].campo == ""titulo"") {
                                            node.span.children[2].children[0].style.color = estilosresponse[s].style;; //titulo
                                        } else if (estilosresponse[s].style == 'pink' && estilosresponse[s].campo == ""titulo"") {
                                            node.span.children[2].children[0].style.color = estilosresponse[s].style;; //titulo
                                        } else if (estilosresponse[s].style == 'red' && estilosresponse[s].campo == ""titulo"") ");
                WriteLiteral(@"{
                                            node.span.children[2].children[0].style.color = estilosresponse[s].style;; //titulo
                                        } else if (estilosresponse[s].style == 'orange' && estilosresponse[s].campo == ""titulo"") {
                                            node.span.children[2].children[0].style.color = estilosresponse[s].style;; //titulo
                                        } else if (estilosresponse[s].style == 'yellow' && estilosresponse[s].campo == ""titulo"") {
                                            node.span.children[2].children[0].style.color = estilosresponse[s].style;; //titulo
                                        } else if (estilosresponse[s].style == 'lime' && estilosresponse[s].campo == ""titulo"") {
                                            node.span.children[2].children[1].style.color = estilosresponse[s].style;; //titulo
                                        }


                                        else if (estilosresponse");
                WriteLiteral(@"[s].style == 'silver' && estilosresponse[s].campo == ""descripcion"") {
                                            node.span.children[2].children[1].style.color = estilosresponse[s].style;; //descripcion
                                        } else if (estilosresponse[s].style == 'lightslategray' && estilosresponse[s].campo == ""descripcion"") {
                                            node.span.children[2].children[1].style.color = estilosresponse[s].style;; //descripcion
                                        } else if (estilosresponse[s].style == 'grey' && estilosresponse[s].campo == ""descripcion"") {
                                            node.span.children[2].children[1].style.color = estilosresponse[s].style;; //descripcion
                                        } else if (estilosresponse[s].style == 'dimgrey' && estilosresponse[s].campo == ""descripcion"") {
                                            node.span.children[2].children[1].style.color = estilosresponse[s].style;; //descripcion");
                WriteLiteral(@"
                                        } else if (estilosresponse[s].style == 'dark' && estilosresponse[s].campo == ""descripcion"") {
                                            node.span.children[2].children[1].style.color = estilosresponse[s].style;; //descripcion
                                        } else if (estilosresponse[s].style == 'blue' && estilosresponse[s].campo == ""descripcion"") {
                                            node.span.children[2].children[1].style.color = estilosresponse[s].style;; //descripcion
                                        } else if (estilosresponse[s].style == 'azure' && estilosresponse[s].campo == ""descripcion"") {
                                            node.span.children[2].children[1].style.color = estilosresponse[s].style;; //descripcion
                                        } else if (estilosresponse[s].style == 'indigo' && estilosresponse[s].campo == ""descripcion"") {
                                            node.span.children[2].children[1].");
                WriteLiteral(@"style.color = estilosresponse[s].style;; //descripcion
                                        } else if (estilosresponse[s].style == 'purple' && estilosresponse[s].campo == ""descripcion"") {
                                            node.span.children[2].children[1].style.color = estilosresponse[s].style;; //descripcion
                                        } else if (estilosresponse[s].style == 'pink' && estilosresponse[s].campo == ""descripcion"") {
                                            node.span.children[2].children[1].style.color = estilosresponse[s].style;; //descripcion
                                        } else if (estilosresponse[s].style == 'red' && estilosresponse[s].campo == ""descripcion"") {
                                            node.span.children[2].children[1].style.color = estilosresponse[s].style;; //descripcion
                                        } else if (estilosresponse[s].style == 'orange' && estilosresponse[s].campo == ""descripcion"") {
                       ");
                WriteLiteral(@"                     node.span.children[2].children[1].style.color = estilosresponse[s].style;; //descripcion
                                        } else if (estilosresponse[s].style == 'yellow' && estilosresponse[s].campo == ""descripcion"") {
                                            node.span.children[2].children[1].style.color = estilosresponse[s].style;; //descripcion
                                        } else if (estilosresponse[s].style == 'lime' && estilosresponse[s].campo == ""descripcion"") {
                                            node.span.children[2].children[1].style.color = estilosresponse[s].style;; //descripcion
                                        }


                                        else if (estilosresponse[s].style == '8px' && estilosresponse[s].campo == ""titulo"") {
                                            node.span.children[2].children[0].style.fontSize = estilosresponse[s].style;; //titulo
                                        } else if (estilosresponse[");
                WriteLiteral(@"s].style == '10px' && estilosresponse[s].campo == ""titulo"") {
                                            node.span.children[2].children[0].style.fontSize = estilosresponse[s].style;; //titulo
                                        } else if (estilosresponse[s].style == '12px' && estilosresponse[s].campo == ""titulo"") {
                                            node.span.children[2].children[0].style.fontSize = estilosresponse[s].style;; //titulo
                                        } else if (estilosresponse[s].style == '14px' && estilosresponse[s].campo == ""titulo"") {
                                            node.span.children[2].children[0].style.fontSize = estilosresponse[s].style;; //titulo
                                        } else if (estilosresponse[s].style == '16px' && estilosresponse[s].campo == ""titulo"") {
                                            node.span.children[2].children[0].style.fontSize = estilosresponse[s].style;; //titulo
                                        }
");
                WriteLiteral(@"
                                        else if (estilosresponse[s].style == '8px' && estilosresponse[s].campo == ""descripcion"") {
                                            node.span.children[2].children[1].style.fontSize = estilosresponse[s].style;; //descripcion
                                        } else if (estilosresponse[s].style == '10px' && estilosresponse[s].campo == ""descripcion"") {
                                            node.span.children[2].children[1].style.fontSize = estilosresponse[s].style;; //descripcion
                                        } else if (estilosresponse[s].style == '12px' && estilosresponse[s].campo == ""descripcion"") {
                                            node.span.children[2].children[1].style.fontSize = estilosresponse[s].style;; //descripcion
                                        } else if (estilosresponse[s].style == '14px' && estilosresponse[s].campo == ""descripcion"") {
                                            node.span.children[2].children");
                WriteLiteral(@"[1].style.fontSize = estilosresponse[s].style;; //descripcion
                                        } else if (estilosresponse[s].style == '16px' && estilosresponse[s].campo == ""descripcion"") {
                                            node.span.children[2].children[1].style.fontSize = estilosresponse[s].style;; //descripcion
                                        }

                                    }
                                }
                            });

                            // (Index #0 is rendered by fancytree by adding the checkbox)
                            // Set column #1 info from node data:
                            //$tdList.eq(0).text(node.getIndexHier());
                            // (Index #2 is rendered by fancytree)

                            //---------------------------------------------------------->>>
                            //console.log(pySelected)
                            var titles = funGetTitulos(pySelected)
                   ");
                WriteLiteral(@"         titles.then(function (result) {
                                //console.log(result);
                                var colName = """";

                                if (result.length != 0) {
                                    // 50 cajas para nombres de  columnas.
                                    //for (h = 0; h <= result.length - 1; h++) { //capturar los 50 titulos
                                    for (h = 0; h <= 10 - 1; h++) {
                                        $('#' + treeReach + '_colth_' + result[h].tituloID).remove(); //removemos para que no se vuelvan a crear cada vez que inicializamos el arbol
                                        colName = colName + '<th id=""' + treeReach + '_colth_' + result[h].tituloID + '""><input id=""' + treeReach + '_colname_' + result[h].tituloID + '"" onchange=""InsertUpdateTitulo(`' + treeReach + '_colname`,' + h + ',' + result[h].tituloID + ',' + pySelected + ',`' + vPermiso + '` )"" type=""text"" value=""' + result[h].titulo + '"" style=""width:");
                WriteLiteral(@" 60px;""></th>';
                                    }
                                    $('#head_' + treeReach).append(colName).fadeIn(300000);
                                }
                            });

                            //console.log($tdList);
                            //console.log(node.data.id);
                            //---------> obtener los datos de la tabla TB_NIVEL_INFO segun el id.
                            var info = funGetInfo(node.data.id)
                            info.then(function (result) {

                                // Si la longitud del resultado es distinta de 0 hay datos.
                                if (result.length != 0) {

                                    var m = 2;

                                    for (n = 0; n <= result.length - 1; n++) {

                                        for (i = 2; i <= 11; i++) {

                                            $tdList.eq(m).html('<input type=""text"" id=""' + treeReach + '_colvalu");
                WriteLiteral(@"e' + result[n].infoID + '"" value=""' + result[n].informacion + '"" onchange=""insertOrUpdateInfoGrilla(`tree_' + pySelected + '`,`' + result[n].infoID + '`,`' + 0 + '`,`' + 0 + '`,`' + vPermiso + '`)"" style=""width: 60px;"">');
                                        }
                                        m = m + 1;
                                        for (j = m; j <= 11; j++) {

                                            $tdList.eq(j).html('<input id=""' + treeReach + '_colvalue_' + j + '_' + node.data.id + '"" onchange=""insertOrUpdateInfoGrilla(`tree_' + pySelected + '`,`' + 0 + '`,`' + j + '`,`' + node.data.id + '`,`' + vPermiso + '`)"" type=""text"" style=""width: 60px;""/>');

                                        }
                                    }
                                } else { // Sino no hay ningun dato en las cajas de un arbol. crear las cajas desde 0

                                    //console.log(""Construir desde 0"");
                                    for (k = 2; k <= 1");
                WriteLiteral(@"1; k++) {

                                        $tdList.eq(k).html('<input id=""' + treeReach + '_colvalue_' + k + '_' + node.data.id + '"" onchange=""insertOrUpdateInfoGrilla(`tree_' + pySelected + '`,`' + 0 + '`,`' + k + '`,`' + node.data.id + '`,`' + vPermiso + '`)"" type=""text"" style=""width: 60px;""/>');

                                    }
                                }

                            });
                            // Podemos setear la información en la columna 2 (la que continua al titulo.)
                            //$tdList.eq(2).find(""input"").val(""hola"");
                            //$tdList.eq(2).html('<input type=""text"" value=""' + node.data.id + '"">');
                        },
                        modifyChild: function (event, data) {
                            data.tree.info(event.type, data);
                            //console.log(data);
                            //console.log(data.childNode.data.id);
                            //console.log(data.c");
                WriteLiteral(@"hildNode.title); //nombre a actualizar
                            //console.log(""------------>>"")
                            //console.log(data.node)
                            //console.log(""----> OPERATION DRAG & DROP"")
                            if (data.operation == ""add"") {
                                if (typeof (data.childNode.data.id) != 'undefined') {                               
                                //console.log(data.operation)
                                //console.log(data.childNode.data.id) // id actualizar
                                //console.log(data.node.data.id) // id del nuevo parent
                                    $.ajax({
                                        type: ""POST"",
                                        dataType: ""json"",
                                        url: ""/Home/funUpdateLvlParent"",
                                        data: {
                                            ""id"": data.childNode.data.id,
                   ");
                WriteLiteral(@"                         ""newparentId"": data.node.data.id,
                                        },
                                        success: function (response) {
                                            //console.log(response);
                                        },
                                    });
                                }
                            }
                            //console.log(""----> OPERATION DRAG & DROP"")
                        },
                    })
                        .on(""nodeCommand"", function (event, data) {
                            // Custom event handler that is triggered by keydown-handler and
                            // context menu:
                            var refNode,
                                moveMode,
                                tree = $.ui.fancytree.getTree(this),
                                node = tree.getActiveNode();

                            //console.log(""--------------------->>Add"")
");
                WriteLiteral(@"                            //console.log(node.data.id) //enviar como parent id
                            //console.log(node.childNode) //enviar como parent id
                            //console.log(""--------------------->>Add"")

                            switch (data.cmd) {
                                case ""addChild"":
                                    tree.applyCommand(data.cmd, node);                                    
                                    break;
                                case ""addSibling"":                                   
                                    tree.applyCommand(data.cmd, node);
                                    break;                                    
                                //console.log(""------------>>"")
                                //console.log(data.cmd)
                                case ""indent"":
                                case ""moveDown"":
                                case ""moveUp"":
                           ");
                WriteLiteral(@"     case ""outdent"":
                                case ""remove"":

                                    var selectedNodes = $.ui.fancytree.getTree(""#"" + treeReach).getSelectedNodes();                                   

                                    if (selectedNodes.length > 0) {

                                        if (data.cmd == ""remove"" && vPermiso == ""EDITOR"") {
                                            Swal.fire({
                                                title: '¿Estás seguro que deseas Eliminar todos?',
                                                showDenyButton: true,
                                                showCancelButton: true,
                                                confirmButtonText: `Si`,
                                                denyButtonText: `Don't save`,
                                            }).then((result) => {
                                                /* Read more about isConfirmed, isDenied below */
              ");
                WriteLiteral(@"                                  if (result.isConfirmed) {
                                                    //console.log(node.data.id); // id a eliminar padre e hijos.
                                                    //------------------------>>AJAX Eliminar Nivel Padre e Hijos

                                                    selectedNodes.forEach(function element(node) {                                                        

                                                        $.ajax({
                                                        type: ""POST"",
                                                        dataType: ""json"",
                                                        url: ""/Home/funDeleteLvlAndSublvls"",
                                                        data: {
                                                            ""Id"": node.data.id,
                                                        },
                                                        succes");
                WriteLiteral(@"s: function (response) {
                                                            //console.log(response);
                                                            if (response >= 1) {                         
                                                                }
                                                            },
                                                        });
                                                    });
                                                    tree.applyCommand(data.cmd, node); //aplicamos cambios para visualizarlos en el arbol.
                                                    //------------------------>>AJAX Eliminar Nivel Padre e Hijos                                                                    
                                                } else if (result.isDenied) {
                                                    Swal.fire('No', '', 'info')
                                                }
                      ");
                WriteLiteral(@"                      })
                                        };
                                    } else {
                                            if (data.cmd == ""remove"" && vPermiso == ""EDITOR"") {
                                                Swal.fire({
                                                    title: '¿Estás seguro que deseas Eliminarlo?',
                                                    showDenyButton: true,
                                                    showCancelButton: true,
                                                    confirmButtonText: `Si`,
                                                    denyButtonText: `Don't save`,
                                                }).then((result) => {
                                                    /* Read more about isConfirmed, isDenied below */
                                                    if (result.isConfirmed) {
                                                        //console.log(node.data.id);");
                WriteLiteral(@" // id a eliminar padre e hijos.
                                                        //------------------------>>AJAX Eliminar Nivel Padre e Hijos
                                                        $.ajax({
                                                            type: ""POST"",
                                                            dataType: ""json"",
                                                            url: ""/Home/funDeleteLvlAndSublvls"",
                                                            data: {
                                                                ""Id"": node.data.id,
                                                            },
                                                            success: function (response) {
                                                                //console.log(response);
                                                                if (response >= 1) {
                                                                   ");
                WriteLiteral(@" tree.applyCommand(data.cmd, node);
                                                                }
                                                            },
                                                        });
                                                        //------------------------>>AJAX Eliminar Nivel Padre e Hijos                                                                    
                                                    } else if (result.isDenied) {
                                                        Swal.fire('No', '', 'info')
                                                    }
                                                });
                                        };
                                    }
                                   
                                    break;
                                case ""rename"":
                                    tree.applyCommand(data.cmd, node);

                                    break;
  ");
                WriteLiteral(@"                              case ""cut"":
                                    CLIPBOARD = { mode: data.cmd, data: node };
                                    break;
                                case ""copy"":
                                    CLIPBOARD = {
                                        mode: data.cmd,
                                        data: node.toDict(true, function (dict, node) {
                                            delete dict.key;
                                        }),
                                    };
                                    break;
                                case ""clear"":
                                    CLIPBOARD = null;
                                    break;
                                case ""paste"":
                                    if (CLIPBOARD.mode === ""cut"") {
                                        // refNode = node.getPrevSibling();
                                        CLIPBOARD.data.moveTo(node, ""child"");
    ");
                WriteLiteral(@"                                    CLIPBOARD.data.setActive();
                                    } else if (CLIPBOARD.mode === ""copy"") {
                                        node.addChildren(
                                            CLIPBOARD.data
                                        ).setActive();
                                    }
                                    break;
                                case ""applyboldtitle"":

                                    var selectedNodes = $.ui.fancytree.getTree(""#"" + treeReach).getSelectedNodes();
                                    //console.log(selectedNodes)
                                    if (selectedNodes.length > 0) {
                                        //console.log(""aplicando negra a muchos elementos"");                                                                                
                                        selectedNodes.forEach(function element(node) {
                                            //consol");
                WriteLiteral(@"e.log(node.data.id);
                                            var rpt = applyOrRemoveStyle(node.data.id, ""bold"", ""STYLE_APPLY"", ""titulo"")
                                            rpt.then(function (styleresponse) {
                                                //console.log(styleresponse);
                                                if (styleresponse > 0) {
                                                    //node.span.style.fontWeight = ""bold""
                                                    node.span.children[2].children[0].style.fontWeight = ""bold""; //titulo
                                                } else {
                                                    Swal.fire('ERROR', 'Hubo un problema, probablemente el estilo ya existe.', 'warning')
                                                }
                                            });
                                        });

                                    } else {
                                    //tree.");
                WriteLiteral(@"applyCommand(data.cmd, node);
                                    //console.log(""Aplicar Negrita"");
                                    //console.log(node.data.id); // id del nodo.
                                        var rpt = applyOrRemoveStyle(node.data.id, ""bold"", ""STYLE_APPLY"", ""titulo"")
                                        rpt.then(function (styleresponse) {

                                            //console.log(styleresponse);
                                            if (styleresponse > 0) {
                                                //node.span.style.fontWeight = ""bold""
                                                node.span.children[2].children[0].style.fontWeight = ""bold""; //titulo
                                            } else {
                                                Swal.fire('ERROR', 'Hubo un problema, probablemente el estilo ya existe.', 'warning')
                                            }
                                        });
            ");
                WriteLiteral(@"                        }                                 
                                   
                                    //addColumn(treeReach, node.data.id);
                                    break;
                                case ""removeboldtitle"":

                                    var selectedNodes = $.ui.fancytree.getTree(""#"" + treeReach).getSelectedNodes();

                                    if (selectedNodes.length > 0) {

                                        selectedNodes.forEach(function element(node) {

                                            var rpt = applyOrRemoveStyle(node.data.id, ""bold"", ""STYLE_REMOVE"", ""titulo"")
                                            rpt.then(function (styleresponse) {
                                                //console.log(styleresponse);
                                                if (styleresponse > 0) {
                                                    node.span.children[2].children[0].style.fontWeight = """"; //ti");
                WriteLiteral(@"tulo
                                                } else {
                                                    Swal.fire('ERROR', 'Hubo un problema, probablemente el estilo ya existe.', 'warning')
                                                }
                                            });

                                        });

                                    } else {

                                        //tree.applyCommand(data.cmd, node);
                                        //console.log(""Aplicar Negrita"");
                                        //console.log(node.data.id); // id del nodo.
                                        var rpt = applyOrRemoveStyle(node.data.id, ""bold"", ""STYLE_REMOVE"", ""titulo"")
                                        rpt.then(function (styleresponse) {
                                            //console.log(styleresponse);
                                            if (styleresponse > 0) {
                                             ");
                WriteLiteral(@"   node.span.children[2].children[0].style.fontWeight = """"; //titulo
                                            } else {
                                                Swal.fire('ERROR', 'Hubo un problema, probablemente el estilo ya existe.', 'warning')
                                            }
                                        });
                                    }                 
                                   
                                    //addColumn(treeReach, node.data.id);
                                    break;
                                    
                                case ""applybolddescription"":

                                    var selectedNodes = $.ui.fancytree.getTree(""#"" + treeReach).getSelectedNodes();

                                    if (selectedNodes.length > 0) {

                                        selectedNodes.forEach(function element(node) {

                                            //tree.applyCommand(data.cmd, node)");
                WriteLiteral(@";
                                            //console.log(""Aplicar Negrita"");
                                            //console.log(node.data.id); // id del nodo.
                                            var rpt = applyOrRemoveStyle(node.data.id, ""bold"", ""STYLE_APPLY"", ""descripcion"")
                                            rpt.then(function (styleresponse) {

                                                //console.log(styleresponse);
                                                if (styleresponse > 0) {
                                                    //node.span.style.fontWeight = ""bold""
                                                    node.span.children[2].children[1].style.fontWeight = ""bold""; //descripcion
                                                } else {
                                                    Swal.fire('ERROR', 'Hubo un problema, probablemente el estilo ya existe.', 'warning')
                                                }
                       ");
                WriteLiteral(@"                     });

                                        });


                                    } else {
                                        //tree.applyCommand(data.cmd, node);
                                        //console.log(""Aplicar Negrita"");
                                        //console.log(node.data.id); // id del nodo.
                                        var rpt = applyOrRemoveStyle(node.data.id, ""bold"", ""STYLE_APPLY"", ""descripcion"")
                                        rpt.then(function (styleresponse) {

                                            //console.log(styleresponse);
                                            if (styleresponse > 0) {
                                                //node.span.style.fontWeight = ""bold""
                                                node.span.children[2].children[1].style.fontWeight = ""bold""; //descripcion
                                            } else {
                                                Swa");
                WriteLiteral(@"l.fire('ERROR', 'Hubo un problema, probablemente el estilo ya existe.', 'warning')
                                            }
                                        });
                                    }                                  
                                   
                                    //addColumn(treeReach, node.data.id);
                                    break;
                                case ""removebolddescription"":

                                    var selectedNodes = $.ui.fancytree.getTree(""#"" + treeReach).getSelectedNodes();

                                    if (selectedNodes.length > 0) {

                                        selectedNodes.forEach(function element(node) {

                                            //tree.applyCommand(data.cmd, node);
                                            //console.log(""Quitar negrita"");
                                            var rpt = applyOrRemoveStyle(node.data.id, ""bold"", ""STYLE_REMOVE"", ""de");
                WriteLiteral(@"scripcion"")
                                            rpt.then(function (styleresponse) {
                                                //console.log(styleresponse);
                                                if (styleresponse > 0) {
                                                    node.span.children[2].children[1].style.fontWeight = """"; //descripcion
                                                } else {
                                                    Swal.fire('ERROR', 'Hubo un problema quitando el estilo', 'warning')
                                                }
                                            });

                                        });

                                    } else {

                                        //tree.applyCommand(data.cmd, node);
                                        //console.log(""Quitar negrita"");
                                        var rpt = applyOrRemoveStyle(node.data.id, ""bold"", ""STYLE_REMOVE"", ""descripcion"")
 ");
                WriteLiteral(@"                                       rpt.then(function (styleresponse) {
                                            //console.log(styleresponse);
                                            if (styleresponse > 0) {
                                                node.span.children[2].children[1].style.fontWeight = """"; //descripcion
                                            } else {
                                                Swal.fire('ERROR', 'Hubo un problema quitando el estilo', 'warning')
                                            }
                                        });
                                    }                                    
                                    //addColumn(treeReach, node.data.id);
                                    break;
                                case ""applyitalictitle"":

                                    var selectedNodes = $.ui.fancytree.getTree(""#"" + treeReach).getSelectedNodes();

                                    if (select");
                WriteLiteral(@"edNodes.length > 0) {

                                        selectedNodes.forEach(function element(node) {

                                            var rpt = applyOrRemoveStyle(node.data.id, ""italic"", ""STYLE_APPLY"", ""titulo"")
                                            rpt.then(function (styleresponse) {

                                                //console.log(styleresponse);
                                                if (styleresponse > 0) {
                                                    node.span.children[2].children[0].style.fontStyle = ""italic""; //titulo
                                                } else {
                                                    Swal.fire('ERROR', 'Hubo un problema, probablemente el estilo ya existe.', 'warning')
                                                }
                                            });

                                        });

                                    } else {

                                ");
                WriteLiteral(@"        //tree.applyCommand(data.cmd, node);
                                        //console.log(""Aplicar Cursiva"");
                                        var rpt = applyOrRemoveStyle(node.data.id, ""italic"", ""STYLE_APPLY"", ""titulo"")
                                        rpt.then(function (styleresponse) {

                                            //console.log(styleresponse);
                                            if (styleresponse > 0) {
                                                node.span.children[2].children[0].style.fontStyle = ""italic""; //titulo
                                            } else {
                                                Swal.fire('ERROR', 'Hubo un problema, probablemente el estilo ya existe.', 'warning')
                                            }
                                        });
                                    }                                    
                                    //console.log(node.data.id); // id del nodo.
  ");
                WriteLiteral(@"                                  //addColumn(treeReach, node.data.id);
                                    break;
                                case ""removeitalictitle"":

                                    var selectedNodes = $.ui.fancytree.getTree(""#"" + treeReach).getSelectedNodes();

                                    if (selectedNodes.length > 0) {

                                        selectedNodes.forEach(function element(node) {

                                            var rpt = applyOrRemoveStyle(node.data.id, ""italic"", ""STYLE_REMOVE"", ""titulo"")
                                            rpt.then(function (styleresponse) {
                                                //console.log(styleresponse);
                                                if (styleresponse > 0) {
                                                    node.span.children[2].children[0].style.fontStyle = """"; //titulo
                                                } else {
                                ");
                WriteLiteral(@"                    Swal.fire('ERROR', 'Hubo un problema quitando el estilo', 'warning')
                                                }
                                            });

                                        });

                                    } else {

                                        //tree.applyCommand(data.cmd, node);
                                        //console.log(""Quitar negrita"");
                                        var rpt = applyOrRemoveStyle(node.data.id, ""italic"", ""STYLE_REMOVE"", ""titulo"")
                                        rpt.then(function (styleresponse) {
                                            //console.log(styleresponse);
                                            if (styleresponse > 0) {
                                                node.span.children[2].children[0].style.fontStyle = """"; //titulo
                                            } else {
                                                Swal.fire('ERROR', 'Hubo un");
                WriteLiteral(@" problema quitando el estilo', 'warning')
                                            }
                                        });
                                    }
                                    
                                    //console.log(node.data.id); // id del nodo.
                                    //addColumn(treeReach, node.data.id);
                                    break;
                                case ""applyitalicdescription"":

                                    var selectedNodes = $.ui.fancytree.getTree(""#"" + treeReach).getSelectedNodes();

                                    if (selectedNodes.length > 0) {

                                        selectedNodes.forEach(function element(node) {

                                            var rpt = applyOrRemoveStyle(node.data.id, ""italic"", ""STYLE_APPLY"", ""descripcion"")
                                            rpt.then(function (styleresponse) {

                                                //cons");
                WriteLiteral(@"ole.log(styleresponse);
                                                if (styleresponse > 0) {
                                                    node.span.children[2].children[1].style.fontStyle = ""italic""; //descripcion
                                                } else {
                                                    Swal.fire('ERROR', 'Hubo un problema, probablemente el estilo ya existe.', 'warning')
                                                }
                                            });
                                        });

                                    } else {

                                        //tree.applyCommand(data.cmd, node);
                                        //console.log(""Aplicar Cursiva"");
                                        var rpt = applyOrRemoveStyle(node.data.id, ""italic"", ""STYLE_APPLY"", ""descripcion"")
                                        rpt.then(function (styleresponse) {

                                            //co");
                WriteLiteral(@"nsole.log(styleresponse);
                                            if (styleresponse > 0) {
                                                node.span.children[2].children[1].style.fontStyle = ""italic""; //descripcion
                                            } else {
                                                Swal.fire('ERROR', 'Hubo un problema, probablemente el estilo ya existe.', 'warning')
                                            }
                                        });
                                    }                                    
                                    //console.log(node.data.id); // id del nodo.
                                    //addColumn(treeReach, node.data.id);
                                    break;
                                case ""removeitalicdescription"":

                                    var selectedNodes = $.ui.fancytree.getTree(""#"" + treeReach).getSelectedNodes();

                                    if (selectedNodes.lengt");
                WriteLiteral(@"h > 0) {

                                        selectedNodes.forEach(function element(node) {

                                            var rpt = applyOrRemoveStyle(node.data.id, ""italic"", ""STYLE_REMOVE"", ""descripcion"")
                                            rpt.then(function (styleresponse) {
                                                //console.log(styleresponse);
                                                if (styleresponse > 0) {
                                                    node.span.children[2].children[1].style.fontStyle = """"; //descripcion
                                                } else {
                                                    Swal.fire('ERROR', 'Hubo un problema quitando el estilo', 'warning')
                                                }
                                            });

                                        });

                                    } else {

                                        //tree.applyCommand");
                WriteLiteral(@"(data.cmd, node);
                                        //console.log(""Quitar negrita"");
                                        var rpt = applyOrRemoveStyle(node.data.id, ""italic"", ""STYLE_REMOVE"", ""descripcion"")
                                        rpt.then(function (styleresponse) {
                                            //console.log(styleresponse);
                                            if (styleresponse > 0) {
                                                node.span.children[2].children[1].style.fontStyle = """"; //descripcion
                                            } else {
                                                Swal.fire('ERROR', 'Hubo un problema quitando el estilo', 'warning')
                                            }
                                        });
                                    }                                    
                                   
                                    break;

                                case ""chang");
                WriteLiteral(@"ecolorsfontsize"":
                                    //tree.applyCommand(data.cmd, node);                  
                                    //console.log(node.span.children[2].children[0].style);                                   
                                    $('#txtNodoId').val(node.data.id);
                                    $('#txtGetTree').val(treeReach);                                   
                                    $('#modal-color-admin').modal('show');                                   
                                    //addColumn(treeReach, node.data.id);
                                    break;                                    
                                case ""greensubrayado"":
                                    //tree.applyCommand(data.cmd, node);
                                    var selectedNodes = $.ui.fancytree.getTree(""#"" + treeReach).getSelectedNodes();
                                    if (selectedNodes.length > 0) {

                        ");
                WriteLiteral(@"                selectedNodes.forEach(function element(node) {

                                            var rpt = applyOrRemoveStyle(node.data.id, ""Lime"", ""STYLE_APPLY"", ""subrayado verde"")
                                            rpt.then(function (styleresponse) {
                                                //console.log(styleresponse);
                                                if (styleresponse > 0) {
                                                    node.span.style.backgroundColor = ""Lime"";
                                                } else {
                                                    Swal.fire('ERROR', 'Hubo un problema, si ya cuenta con un subrayado quítelo antes de agregar otro.', 'warning')
                                                }
                                            });

                                        });

                                    } else {

                                        var rpt = applyOrRemoveStyle(node.data.");
                WriteLiteral(@"id, ""Lime"", ""STYLE_APPLY"", ""subrayado verde"")
                                        rpt.then(function (styleresponse) {
                                            //console.log(styleresponse);
                                            if (styleresponse > 0) {
                                                node.span.style.backgroundColor = ""Lime"";
                                            } else {
                                                Swal.fire('ERROR', 'Hubo un problema, si ya cuenta con un subrayado quítelo antes de agregar otro.', 'warning')
                                            }
                                        });
                                    } 
                                                                       
                                    break;
                                case ""bluesubrayado"":

                                    var selectedNodes = $.ui.fancytree.getTree(""#"" + treeReach).getSelectedNodes();

                        ");
                WriteLiteral(@"            if (selectedNodes.length > 0) {

                                        selectedNodes.forEach(function element(node) {

                                            var rpt = applyOrRemoveStyle(node.data.id, ""Aqua"", ""STYLE_APPLY"", ""subrayado azul"")
                                            rpt.then(function (styleresponse) {
                                                //console.log(styleresponse);
                                                if (styleresponse > 0) {
                                                    node.span.style.backgroundColor = ""Aqua"";
                                                } else {
                                                    Swal.fire('ERROR', 'Hubo un problema, si ya cuenta con un subrayado quítelo antes de agregar otro.', 'warning')
                                                }
                                            });
                                        });

                                    } else {

           ");
                WriteLiteral(@"                             var rpt = applyOrRemoveStyle(node.data.id, ""Aqua"", ""STYLE_APPLY"", ""subrayado azul"")
                                        rpt.then(function (styleresponse) {
                                            //console.log(styleresponse);
                                            if (styleresponse > 0) {
                                                node.span.style.backgroundColor = ""Aqua"";
                                            } else {
                                                Swal.fire('ERROR', 'Hubo un problema, si ya cuenta con un subrayado quítelo antes de agregar otro.', 'warning')
                                            }
                                        });
                                    };
                                    
                                    
                                    break;
                                case ""yellowsubrayado"":

                                    var selectedNodes = $.ui.fancytree.");
                WriteLiteral(@"getTree(""#"" + treeReach).getSelectedNodes();

                                    if (selectedNodes.length > 0) {

                                        selectedNodes.forEach(function element(node) {

                                            var rpt = applyOrRemoveStyle(node.data.id, ""Yellow"", ""STYLE_APPLY"", ""subrayado amarillo"")
                                            rpt.then(function (styleresponse) {
                                                //console.log(styleresponse);
                                                if (styleresponse > 0) {
                                                    node.span.style.backgroundColor = ""Yellow"";
                                                } else {
                                                    Swal.fire('ERROR', 'Hubo un problema, si ya cuenta con un subrayado quítelo antes de agregar otro.', 'warning')
                                                }
                                            });
                          ");
                WriteLiteral(@"              });

                                    } else {

                                        var rpt = applyOrRemoveStyle(node.data.id, ""Yellow"", ""STYLE_APPLY"", ""subrayado amarillo"")
                                        rpt.then(function (styleresponse) {
                                            //console.log(styleresponse);
                                            if (styleresponse > 0) {
                                                node.span.style.backgroundColor = ""Yellow"";
                                            } else {
                                                Swal.fire('ERROR', 'Hubo un problema, si ya cuenta con un subrayado quítelo antes de agregar otro.', 'warning')
                                            }
                                        });
                                    }                                    
                                   
                                    break;
                                case ""fuchsias");
                WriteLiteral(@"ubrayado"":

                                    var selectedNodes = $.ui.fancytree.getTree(""#"" + treeReach).getSelectedNodes();

                                    if (selectedNodes.length > 0) {

                                        selectedNodes.forEach(function element(node) {

                                            var rpt = applyOrRemoveStyle(node.data.id, ""Fuchsia"", ""STYLE_APPLY"", ""subrayado fucsia"")
                                            rpt.then(function (styleresponse) {
                                                //console.log(styleresponse);
                                                if (styleresponse > 0) {
                                                    node.span.style.backgroundColor = ""Fuchsia"";
                                                } else {
                                                    Swal.fire('ERROR', 'Hubo un problema, si ya cuenta con un subrayado quítelo antes de agregar otro.', 'warning')
                                         ");
                WriteLiteral(@"       }
                                            });

                                        });

                                    } else {

                                        var rpt = applyOrRemoveStyle(node.data.id, ""Fuchsia"", ""STYLE_APPLY"", ""subrayado fucsia"")
                                        rpt.then(function (styleresponse) {
                                            //console.log(styleresponse);
                                            if (styleresponse > 0) {
                                                node.span.style.backgroundColor = ""Fuchsia"";
                                            } else {
                                                Swal.fire('ERROR', 'Hubo un problema, si ya cuenta con un subrayado quítelo antes de agregar otro.', 'warning')
                                            }
                                        });
                                    }                                   
                                    
   ");
                WriteLiteral(@"                                 break;
                                case ""redsubrayado"":

                                    var selectedNodes = $.ui.fancytree.getTree(""#"" + treeReach).getSelectedNodes();

                                    if (selectedNodes.length > 0) {

                                        selectedNodes.forEach(function element(node) {

                                            var rpt = applyOrRemoveStyle(node.data.id, ""Red"", ""STYLE_APPLY"", ""subrayado rojo"")
                                            rpt.then(function (styleresponse) {
                                                //console.log(styleresponse);
                                                if (styleresponse > 0) {
                                                    node.span.style.backgroundColor = ""Red"";
                                                } else {
                                                    Swal.fire('ERROR', 'Hubo un problema, si ya cuenta con un subrayado quítelo antes");
                WriteLiteral(@" de agregar otro.', 'warning')
                                                }
                                            });

                                        });

                                    } else {

                                        var rpt = applyOrRemoveStyle(node.data.id, ""Red"", ""STYLE_APPLY"", ""subrayado rojo"")
                                        rpt.then(function (styleresponse) {
                                            //console.log(styleresponse);
                                            if (styleresponse > 0) {
                                                node.span.style.backgroundColor = ""Red"";
                                            } else {
                                                Swal.fire('ERROR', 'Hubo un problema, si ya cuenta con un subrayado quítelo antes de agregar otro.', 'warning')
                                            }
                                        });
                                    }               ");
                WriteLiteral(@"                    
                                   
                                    break;
                                case ""removesubrayado"":

                                    var selectedNodes = $.ui.fancytree.getTree(""#"" + treeReach).getSelectedNodes();

                                    if (selectedNodes.length > 0) {

                                        selectedNodes.forEach(function element(node) {

                                            var rpt1 = applyOrRemoveStyle(node.data.id, ""Lime"", ""STYLE_REMOVE"", ""subrayado verde"")
                                            rpt1.then(function (resp1) {
                                                var rpt2 = applyOrRemoveStyle(node.data.id, ""Aqua"", ""STYLE_REMOVE"", ""subrayado azul"")
                                                rpt2.then(function (resp2) {
                                                    var rpt3 = applyOrRemoveStyle(node.data.id, ""Yellow"", ""STYLE_REMOVE"", ""subrayado amarillo"")
                  ");
                WriteLiteral(@"                                  rpt3.then(function (resp3) {
                                                        var rpt4 = applyOrRemoveStyle(node.data.id, ""Fuchsia"", ""STYLE_REMOVE"", ""subrayado fucsia"")
                                                        rpt4.then(function (resp4) {
                                                            var rpt5 = applyOrRemoveStyle(node.data.id, ""Red"", ""STYLE_REMOVE"", ""subrayado rojo"")
                                                            rpt5.then(function (resp5) {
                                                                node.span.style.backgroundColor = """";
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });

                                    } else {

       ");
                WriteLiteral(@"                                 var rpt1 = applyOrRemoveStyle(node.data.id, ""Lime"", ""STYLE_REMOVE"", ""subrayado verde"")
                                        rpt1.then(function (resp1) {
                                            var rpt2 = applyOrRemoveStyle(node.data.id, ""Aqua"", ""STYLE_REMOVE"", ""subrayado azul"")
                                            rpt2.then(function (resp2) {
                                                var rpt3 = applyOrRemoveStyle(node.data.id, ""Yellow"", ""STYLE_REMOVE"", ""subrayado amarillo"")
                                                rpt3.then(function (resp3) {
                                                    var rpt4 = applyOrRemoveStyle(node.data.id, ""Fuchsia"", ""STYLE_REMOVE"", ""subrayado fucsia"")
                                                    rpt4.then(function (resp4) {
                                                        var rpt5 = applyOrRemoveStyle(node.data.id, ""Red"", ""STYLE_REMOVE"", ""subrayado rojo"")
                                         ");
                WriteLiteral(@"               rpt5.then(function (resp5) {
                                                            node.span.style.backgroundColor = """";
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    }                                                               
                                                                                          
                                    break;

                                case ""setfoldericon"":
                                    //tree.applyCommand(data.cmd, node);
                                    console.log(""Añadir icono de folder"");
                                    var rpt = applyOrRemoveStyle(node.data.id, ""true"", ""STYLE_APPLY"", """")
                                    rpt.then(function (styleres");
                WriteLiteral(@"ponse) {
                                        //console.log(styleresponse);
                                        if (styleresponse > 0) {
                                            node.folder = true;
                                        } else {
                                            Swal.fire('ERROR', 'Hubo un problema, Puede que el nivel ya cuente con ícono de carpeta', 'warning')
                                        }
                                    });
                                    //console.log(node.data.id); // id del nodo.
                                    //addColumn(treeReach, node.data.id);
                                    break;

                                case ""removefoldericon"":
                                    //tree.applyCommand(data.cmd, node);
                                    //console.log(""Quitar icono de folder"");
                                    var rpt = applyOrRemoveStyle(node.data.id, ""true"", ""STYLE_REMOVE"", """")
           ");
                WriteLiteral(@"                         rpt.then(function (styleresponse) {
                                        //console.log(styleresponse);
                                        if (styleresponse > 0) {
                                            node.folder = """";
                                        } else {
                                            Swal.fire('ERROR', 'Hubo un problema quitando el estilo', 'warning')
                                        }
                                    });
                                    //console.log(node.data.id); // id del nodo.
                                    //addColumn(treeReach, node.data.id);
                                    break;
                                case ""addnchilds"":
                                    //tree.applyCommand(data.cmd, node);
                                    //console.log(""Añadir n hijos"");
                                    //console.log(node.data.id);
                                    $('#modal-utili");
                WriteLiteral(@"ties').modal('show');

                                    $('#txtIdParent').val(node.data.id);
                                    $('#txtPyID').val(pySelected);
                                    $('#txtTree').val(treeReach);
                                    //console.log(nodo.parent);

                                    break;
                                case ""duplicatelevel"":
                                    //tree.applyCommand(data.cmd, node);
                                    //console.log(""Añadir n hijos"");
                                    //console.log(node.data.id);
                                    //console.log(nodo.parent);

                                    Swal.fire({
                                        title: 'Cantidad de veces a duplicar',
                                        input: 'number',
                                        inputAttributes: {
                                            autocapitalize: 'off',
                               ");
                WriteLiteral(@"             min: 1,
                                        },
                                        inputValue: 1,
                                        showCancelButton: true,
                                        confirmButtonText: 'Duplicar',
                                        showLoaderOnConfirm: true,                                      
                                    }).then((result) => {
                                        if (result.isConfirmed) {
                                            Swal.fire({ title: 'Duplicando ' + result.value + ' veces', allowOutsideClick: false, showConfirmButton: false })
                                            //--------------------------------->>
                                            //console.log(result.value) cantidad de veces
                                            var rpt = duplicateLevels(node.data.id, node.data.parentId, pySelected, result.value)
                                            rpt.then(function (respon");
                WriteLiteral(@"se) {
                                                //console.log(styleresponse);
                                                if (response > 0) {
                                                    Swal.fire('Nivel duplicado !', '', 'success')
                                                    var tree = $(""#"" + treeReach).fancytree(""getTree""); // para obtener el arbol renderizado.
                                                    var nodo = tree.getActiveNode(); // para obtener el nodo activo.
                                                    nodo.parent.resetLazy(); //recargamos el nodo parent para cargar los id de los n elementos ingresados.
                                                } else {
                                                    Swal.fire('ERROR', 'Hubo un problema, no se pudo duplicar correctamente.', 'warning')
                                                }
                                            }).catch(error => {
                                        ");
                WriteLiteral(@"        Swal.fire('ERROR', 'Hubo un problema, no se pudo duplicar correctamente.', 'warning')
                                            });
                                        }
                                    });                                   

                                    break;
                                case ""setsecondinput"":
                                    //tree.applyCommand(data.cmd, node);                                      
                                     //var nodoActivo = node;
                                    //node.setExpanded(true); // expandir nodo para obtener la data de los hijos sino sale error
                                    //console.log(node.data.descripcion);                                   

                                    if (node.expanded === true) { //preguntar si el nodo esta expandido                                      
                                        var childNodes = node.children;
                          ");
                WriteLiteral(@"              //console.log(node)
                                        buildSecondInput(childNodes, treeReach, node.data.descripcion); //envio los datos de los hijos y el nodo para resetear el nodo padre.
                                           $('#modal-second-input').modal('show'); 
                                    } else {
                                        Swal.fire('ELEMENTO CONTRAIDO', 'Por favor desglose todos los elementos hijos y subhijos que desee incluir', 'warning')
                                    }                                   

                                    //console.log(node.data.id); // id del nodo.
                                    //addColumn(treeReach, node.data.id);
                                    break;
                                //case ""hidegrid"":
                                //    //tree.applyCommand(data.cmd, node);
                                //    console.log(""ocultar columnas"");
                                //    console");
                WriteLiteral(@".log(node)
                                //    //console.log(node.data.id); // id del nodo.
                                //    //addColumn(treeReach, node.data.id);
                                //    break;
                                //case ""newcolumn"":
                                //    //tree.applyCommand(data.cmd, node);
                                //    console.log(""Nueva columna"");
                                //    console.log(node)
                                //    //console.log(node.data.id); // id del nodo.
                                //    //addColumn(treeReach, node.data.id);
                                //    break;
                                default:
                                    alert(""Unhandled command: "" + data.cmd);
                                    return;
                            }
                        })
                        .on(""keydown"", function (e) {
                            var cmd = null;
                   ");
                WriteLiteral(@"         //------------------------------- EVENTOS DESENCADENADOS POR TECLAS.
                            // console.log(e.type, $.ui.fancytree.eventToString(e));
                            switch ($.ui.fancytree.eventToString(e)) {
                                case ""ctrl+shift+n"":
                                case ""meta+shift+n"": // mac: cmd+shift+n
                                    cmd = ""addChild"";
                                    break;
                                case ""ctrl+c"":
                                case ""meta+c"": // mac
                                    cmd = ""copy"";
                                    break;
                                case ""ctrl+v"":
                                case ""meta+v"": // mac
                                    cmd = ""paste"";
                                    break;
                                case ""ctrl+x"":
                                case ""meta+x"": // mac
                                    cmd = ""cut"";
          ");
                WriteLiteral(@"                          break;
                                case ""ctrl+n"":
                                case ""meta+n"": // mac
                                    cmd = ""addSibling"";
                                    break;
                                /*case ""del"":*/ //Tecla DEL para eliminar un nodo
                                case ""meta+backspace"": // mac
                                    cmd = ""remove"";
                                    break;
                                // case ""f2"":  // already triggered by ext-edit pluging
                                //   cmd = ""rename"";
                                //   break;
                                case ""ctrl+up"":
                                case ""ctrl+shift+up"": // mac
                                    cmd = ""moveUp"";
                                    break;
                                case ""ctrl+down"":
                                case ""ctrl+shift+down"": // mac
                                ");
                WriteLiteral(@"    cmd = ""moveDown"";
                                    break;
                                case ""ctrl+right"":
                                case ""ctrl+shift+right"": // mac
                                    cmd = ""indent"";
                                    break;
                                case ""ctrl+left"":
                                case ""ctrl+shift+left"": // mac
                                    cmd = ""outdent"";
                            }
                            if (cmd) {
                                $(this).trigger(""nodeCommand"", { cmd: cmd });
                                return false;
                            }
                        });

                    /*
                     * Tooltips
                     */
                    // $(""#tree"").tooltip({
                    //   content: function () {
                    //     return $(this).attr(""title"");
                    //   }
                    // });

                    /*");
                WriteLiteral(@"
                     * Context menu (https://github.com/mar10/jquery-ui-contextmenu)
                     */
                    $(""#"" + treeReach).contextmenu({
                        delegate: ""span.fancytree-node"",
                        menu: [
                            {
                                title: ""Editar <kbd>[F2]</kbd>"",
                                cmd: ""rename"",
                                uiIcon: ""ui-icon-pencil"",
                            },
                            {
                                title: ""Eliminar <strong>(M)</strong> <kbd>[Del]</kbd>"",
                                cmd: ""remove"",
                                uiIcon: ""ui-icon-trash"",
                            },
                            { title: ""----"" },
                            {
                                title: ""Nuevo Hermano <kbd>[Ctrl+N]</kbd>"",
                                cmd: ""addSibling"",
                                uiIcon: ""ui-icon-plus"",
       ");
                WriteLiteral(@"                     },
                            {
                                title: ""Nuevo Hijo <kbd>[Ctrl+Shift+N]</kbd>"",
                                cmd: ""addChild"",
                                uiIcon: ""ui-icon-arrowreturn-1-e"",
                            }, { title: ""----"" },                            
                            {
                                title: ""Añadir N hijos"",
                                cmd: ""addnchilds"",
                            },
                            {
                                title: ""Duplicar elemento"",
                                cmd: ""duplicatelevel"",
                            },
                            {
                                title: ""Formar Segundo Campo"",
                                cmd: ""setsecondinput"",
                            },
                            { title: ""----"" },
                            {
                                title: ""Aplicar Negrita al Titulo <strong>(M");
                WriteLiteral(@")</strong>"",
                                cmd: ""applyboldtitle"",
                            }, {
                                title: ""Quitar Negrita del Titulo <strong>(M)</strong>"",
                                cmd: ""removeboldtitle"",
                            },
                            {
                                title: ""Aplicar Negrita a Descripcion <strong>(M)</strong>"",
                                cmd: ""applybolddescription"",
                            }, {
                                title: ""Quitar Negrita de Descripcion <strong>(M)</strong>"",
                                cmd: ""removebolddescription"",
                            }
                            , {
                                title: ""Aplicar Cursiva al Titulo <strong>(M)</strong>"",
                                cmd: ""applyitalictitle"",
                            }, {
                                title: ""Quitar Cursiva de Titulo <strong>(M)</strong>"",
                            ");
                WriteLiteral(@"    cmd: ""removeitalictitle"",
                            }, {
                                title: ""Aplicar Cursiva a Descripcion <strong>(M)</strong>"",
                                cmd: ""applyitalicdescription"",
                            }, {
                                title: ""Quitar Cursiva de Descripcion <strong>(M)</strong>"",
                                cmd: ""removeitalicdescription"",
                            }, { title: ""----"" },
                            {
                                title: ""Aplicar Colores y Tamaños de Fuente"",
                                cmd: ""changecolorsfontsize"",
                            }
                            , { title: ""----"" },
                            {
                                title: ""Subrayar verde <strong>(M)</strong>"",
                                cmd: ""greensubrayado"",
                            }, {
                                title: ""Subrayar azul <strong>(M)</strong>"",
                          ");
                WriteLiteral(@"      cmd: ""bluesubrayado"",
                            }, {
                                title: ""Subrayar amarillo <strong>(M)</strong>"",
                                cmd: ""yellowsubrayado"",
                            }, {
                                title: ""Subrayar fuchsia <strong>(M)</strong>"",
                                cmd: ""fuchsiasubrayado"",
                            }, {
                                title: ""Subrayar rojo <strong>(M)</strong>"",
                                cmd: ""redsubrayado"",
                            }, {
                                title: ""Quitar Subrayado <strong>(M)</strong>"",
                                cmd: ""removesubrayado"",
                            }, { title: ""----"" },
                            {
                                title: ""Setear icono de folder"",
                                cmd: ""setfoldericon"",
                            },
                            {
                                title: ""Quita");
                WriteLiteral(@"r icono de folder"",
                                cmd: ""removefoldericon"",
                            }
                            //, {
                            //    title: ""Mostrar Grilla"",
                            //    cmd: ""showgrid"",
                            //},
                            //{
                            //    title: ""Ocultar Grilla"",
                            //    cmd: ""hidegrid"",
                            //},
                            //{
                            //    title: ""Nueva Columna"",
                            //    cmd: ""newcolumn"",
                            //    uiIcon: ""ui-icon-plus"",
                            //},
                            //{ title: ""----"" },
                            //{
                            //    title: ""Cortar <kbd>Ctrl+X</kbd>"",
                            //    cmd: ""cut"",
                            //    uiIcon: ""ui-icon-scissors"",
                            //},
                   ");
                WriteLiteral(@"         //{
                            //    title: ""Copiar <kbd>Ctrl-C</kbd>"",
                            //    cmd: ""copy"",
                            //    uiIcon: ""ui-icon-copy"",
                            //},
                            //{
                            //    title: ""Pegar as child<kbd>Ctrl+V</kbd>"",
                            //    cmd: ""paste"",
                            //    uiIcon: ""ui-icon-clipboard"",
                            //    disabled: true,
                            //},
                        ],
                        beforeOpen: function (event, ui) {
                            var node = $.ui.fancytree.getNode(ui.target);
                            $(""#"" + treeReach).contextmenu(
                                ""enableEntry"",
                                ""paste"",
                                !!CLIPBOARD
                            );
                            node.setActive();
                        },
                        s");
                WriteLiteral(@"elect: function (event, ui) {
                            var that = this;
                            // delay the event, so the menu can close and the click event does
                            // not interfere with the edit control
                            setTimeout(function () {
                                $(that).trigger(""nodeCommand"", { cmd: ui.cmd });
                            }, 100);                      

                        },
                    });

                }); //---------> End Fancytree..

            } else {

                //console.log(""proyecto de usuario"");

            } //--------> End If
        }

        //---------------- carga de proyecto MASTER
        function funGetMasterData() {
            var url = ""/Home/funGetLvlMaster"";
            return $.get(url, {}, function (data) {
                //console.log(data);
            });
        };

        //---------------- carga de proyecto de Usuario...
        function funGetPyFro");
                WriteLiteral(@"mUsuario(vIdProject) {
            var url = ""/Home/funGetLvlFromPyUsuario"";
            return $.get(url, { idProyecto: vIdProject }, function (data) {
                //console.log(data);
            });
        };
        //-------------------------------- para obtener los titulos de las columnas...
        async function funGetTitulos(pyId) {
            return titles = await funGetTitlesFromDB(pyId);
            //var info = await funGetInfoFromDB(lvlID);
            //console.log(info)
        };

        function funGetTitlesFromDB(pyId) {
            var url = ""/Home/funGetColumnTitles"";
            return $.get(url, { idProyecto: pyId }, function (data) {
                //console.log(data);
            });
        }

        function InsertUpdateTitulo(tree, i, id, idpy, permiso) {

            //console.log(permiso);

            if (typeof (permiso) === 'undefined' || permiso == ""VIEWER"") {

                Swal.fire('ADVERTENCIA', 'Puedes editar el proyecto en su respect");
                WriteLiteral(@"iva pestaña EDITOR, si tienes el permiso correspondiente.', 'warning')

            } else {

                var urlToGo = """";
                var dataToGo;
                //console.log(tree, i)
                if (id > 0) {

                    var tituloUpdate = $('#' + tree + ""_"" + id).val();

                    //console.log(tree);
                    //console.log(tituloUpdate);

                    urlToGo = ""/Home/funUpdateTitulo"";
                    dataToGo = { ""id"": id, ""title"": tituloUpdate }

                    $.ajax({
                        type: ""POST"",
                        dataType: ""json"",
                        url: urlToGo,
                        data: dataToGo,
                        success: function (response) {

                            if (response > 0) {

                                Swal.fire({
                                    toast: true,
                                    background: 'orange',
                                    ic");
                WriteLiteral(@"on: 'success',
                                    title: 'Titulo actualizado',
                                    animation: false,
                                    position: 'bottom',
                                    showConfirmButton: false,
                                    timer: 3000,
                                    timerProgressBar: true,
                                    didOpen: (toast) => {
                                        toast.addEventListener('mouseenter', Swal.stopTimer)
                                        toast.addEventListener('mouseleave', Swal.resumeTimer)
                                    }
                                })

                            } else {

                                Swal.fire({
                                    toast: true,
                                    background: 'orange',
                                    icon: 'error',
                                    title: 'Hubo un problema',
                    ");
                WriteLiteral(@"                animation: false,
                                    position: 'bottom',
                                    showConfirmButton: false,
                                    timer: 3000,
                                    timerProgressBar: true,
                                    didOpen: (toast) => {
                                        toast.addEventListener('mouseenter', Swal.stopTimer)
                                        toast.addEventListener('mouseleave', Swal.resumeTimer)
                                    }
                                })
                            }
                        },
                    });


                } else {

                    var tituloInsert = $('#' + tree + i).val();
                    //console.log(tituloInsert)
                    urlToGo = ""/Home/funInsertTitulo"";
                    dataToGo = { ""proyectoId"": idpy, ""title"": tituloInsert }

                    $.ajax({
                        type: ""POST"",");
                WriteLiteral(@"
                        dataType: ""json"",
                        url: urlToGo,
                        data: dataToGo,
                        success: function (response) {

                            if (response > 0) {

                                //removemos la funcion onchange y la volvemos a agregar solo con los parametros necesarios para la actualizacion.
                                $('#' + tree + i).removeAttr(""onchange"");
                                $('#' + tree + i).attr('onchange', ""InsertUpdateTitulo('"" + tree + ""','"" + i + ""','"" + response + ""','"" + idpy + ""','"" + permiso + ""')"");
                                //cambiamos el id tambien por el nuevo con solo los parametros requeridos para la actualizacion.
                                $('#' + tree + i).attr('id', tree + '_' + response);

                                Swal.fire({
                                    toast: true,
                                    background: 'orange',
                          ");
                WriteLiteral(@"          icon: 'success',
                                    title: 'Titulo guardado',
                                    animation: false,
                                    position: 'bottom',
                                    showConfirmButton: false,
                                    timer: 3000,
                                    timerProgressBar: true,
                                    didOpen: (toast) => {
                                        toast.addEventListener('mouseenter', Swal.stopTimer)
                                        toast.addEventListener('mouseleave', Swal.resumeTimer)
                                    }
                                })

                            } else {
                                Swal.fire({
                                    toast: true,
                                    background: 'orange',
                                    icon: 'error',
                                    title: 'Hubo un problema',
             ");
                WriteLiteral(@"                       animation: false,
                                    position: 'bottom',
                                    showConfirmButton: false,
                                    timer: 3000,
                                    timerProgressBar: true,
                                    didOpen: (toast) => {
                                        toast.addEventListener('mouseenter', Swal.stopTimer)
                                        toast.addEventListener('mouseleave', Swal.resumeTimer)
                                    }
                                })
                            }
                        },
                    });
                }
            }
        }

        //-------------------------------- para obtener la info de cada nivel...
        async function funGetInfo(lvlID) {
            return info = await funGetInfoFromDB(lvlID);
            //var info = await funGetInfoFromDB(lvlID);
            //console.log(info)
        };

        ");
                WriteLiteral(@"function funGetInfoFromDB(lvlID) {
            var url = ""/Home/funGetInfoFromDB"";
            return $.get(url, { lvlId: lvlID }, function (data) {
                //console.log(data);
            });
        }

        function insertOrUpdateInfoGrilla(tree, id, i, nodeId, permiso) {

            //console.log(permiso);
            if (typeof (permiso) === 'undefined' || permiso == ""VIEWER"") {

                Swal.fire('ADVERTENCIA', 'Puedes editar el proyecto en su respectiva pestaña EDITOR, si tienes el permiso correspondiente.', 'warning')

            } else {

                //tree: referencia al arbol
                //id: el id para actualizar en caso haya un registro guardado.
                //i: el contador de la caja empezando en 2 de izquierda a derecha hasta el 51
                //nodeId: el valor del nivel del nodo en el que estamos.

                var urlToGo = """";
                var dataToGo;

                if (id > 0) {
                    //console.log(""ACT");
                WriteLiteral(@"UALIZAR ! "")
                    var valorCajaUpdate = $('#' + tree + '_colvalue' + id).val();

                    urlToGo = ""/Home/funUpdateInfo"";
                    dataToGo = { ""id"": id, ""informacion"": valorCajaUpdate }

                    $.ajax({
                        type: ""POST"",
                        dataType: ""json"",
                        url: urlToGo,
                        data: dataToGo,
                        success: function (response) {

                            if (response > 0) {

                                Swal.fire({
                                    toast: true,
                                    background: 'orange',
                                    icon: 'success',
                                    title: 'Información actualizada',
                                    animation: false,
                                    position: 'bottom',
                                    showConfirmButton: false,
                                    t");
                WriteLiteral(@"imer: 3000,
                                    timerProgressBar: true,
                                    didOpen: (toast) => {
                                        toast.addEventListener('mouseenter', Swal.stopTimer)
                                        toast.addEventListener('mouseleave', Swal.resumeTimer)
                                    }
                                })

                            } else {

                                Swal.fire({
                                    toast: true,
                                    background: 'orange',
                                    icon: 'error',
                                    title: 'Hubo un problema',
                                    animation: false,
                                    position: 'bottom',
                                    showConfirmButton: false,
                                    timer: 3000,
                                    timerProgressBar: true,
                            ");
                WriteLiteral(@"        didOpen: (toast) => {
                                        toast.addEventListener('mouseenter', Swal.stopTimer)
                                        toast.addEventListener('mouseleave', Swal.resumeTimer)
                                    }
                                })
                            }
                        },
                    });


                } else {
                    //console.log(""INSERTAR ! "")

                    var valorCajaInsert = $('#' + tree + '_colvalue_' + i + ""_"" + nodeId).val();

                    urlToGo = ""/Home/funInsertInfo"";
                    dataToGo = { ""idLvl"": nodeId, ""info"": valorCajaInsert }

                    $.ajax({
                        type: ""POST"",
                        dataType: ""json"",
                        url: urlToGo,
                        data: dataToGo,
                        success: function (response) {

                            if (response > 0) {

                            ");
                WriteLiteral(@"    //removemos la funcion onchange y la volvemos a agregar solo con los parametros necesarios para la actualizacion.
                                $('#' + tree + '_colvalue_' + i + ""_"" + nodeId).removeAttr(""onchange"");
                                $('#' + tree + '_colvalue_' + i + ""_"" + nodeId).attr('onchange', ""insertOrUpdateInfoGrilla('"" + tree + ""','"" + response + ""','"" + 0 + ""','"" + 0 + ""','"" + permiso + ""')"");
                                //cambiamos el id tambien por el nuevo con solo los parametros requeridos para la actualizacion.
                                $('#' + tree + '_colvalue_' + i + ""_"" + nodeId).attr('id', tree + '_colvalue' + response);

                                Swal.fire({
                                    toast: true,
                                    background: 'orange',
                                    icon: 'success',
                                    title: 'Información guardada',
                                    animation: false,
         ");
                WriteLiteral(@"                           position: 'bottom',
                                    showConfirmButton: false,
                                    timer: 3000,
                                    timerProgressBar: true,
                                    didOpen: (toast) => {
                                        toast.addEventListener('mouseenter', Swal.stopTimer)
                                        toast.addEventListener('mouseleave', Swal.resumeTimer)
                                    }
                                })

                            } else {
                                Swal.fire({
                                    toast: true,
                                    background: 'orange',
                                    icon: 'error',
                                    title: 'Hubo un problema',
                                    animation: false,
                                    position: 'bottom',
                                    showConfirmButton: f");
                WriteLiteral(@"alse,
                                    timer: 3000,
                                    timerProgressBar: true,
                                    didOpen: (toast) => {
                                        toast.addEventListener('mouseenter', Swal.stopTimer)
                                        toast.addEventListener('mouseleave', Swal.resumeTimer)
                                    }
                                })
                            }
                        },
                    });
                }
            }
        }

        //-------------------------------- para obtener la info de cada nivel...
        function fnExpandNodes(vIdProyecto) {
            $(""#tree_"" + vIdProyecto).fancytree(""getRootNode"").visit(function (node) {
                if (node.isExpanded() == false) {
                    node.setExpanded(true);
                } 
            });
        }
        //Mensajito para la informacion que se puede editar proyecto
        function Edi");
                WriteLiteral(@"cionInfo() {
           Swal.fire('EDITOR', 'Puedes editar éste proyecto en su respectiva pestaña EDITOR, ya sea porque es tuyo o porque te concedieron dicho permiso.', 'info')
        }

        function fnShowHideColumns(loadedTree) {
            //var select = document.getElementById('selecterColumns');
            var select = $(""#selecterColumns option:selected"").text();
            //console.log(select);
            if (select == ""HIDEALL"") {
                //for para obtener las columnas por indice.
                for (c = 3; c <= 53; c++) {
                    $('#' + loadedTree + ' td:nth-child(' + c + '),th:nth-child(' + c + ')').hide();
                }
            } else if (select == ""SHOWALL"") {
                //for para obtener las columnas por indice.
                for (c = 3; c <= 53; c++) {
                    $('#' + loadedTree + ' td:nth-child(' + c + '),th:nth-child(' + c + ')').show();
                }
            }
        }

        //-----------------------");
                WriteLiteral(@"-----------------------------------> CARGA DE COLUMNAS PARA CONFIGURACION
        var checkedColumns = [];

        function columnId(idElement) {
            this.idElement = idElement;
        };

        function loadColumnas(loadedTree, vIdProyecto) {

            $('#footer_columns_options').remove();
            var option_btns = """";

            //---------------------------------------------------------->
            //console.log(loadedTree, vIdProyecto)
            $('#tbodyAdminColumnas').remove();
            var cuerpo_columnas = """";

            var titulos = funGetTitulos(vIdProyecto)
            titulos.then(function (result) {

                //console.log(result);

                cuerpo_columnas = cuerpo_columnas + '<tbody id=""tbodyAdminColumnas"">';

                result.forEach(function (element) {

                    cuerpo_columnas = cuerpo_columnas + '<tr>';

                    const idPushed = checkedColumns.find(x => x.idElement == element.tituloID);
");
                WriteLiteral(@"
                    if (typeof (idPushed) === 'undefined') {
                        //console.log(""NO ESTA PUSHEADO:"" + idPushed)
                        cuerpo_columnas = cuerpo_columnas + '<td><input onclick=""fnCheckColumnChanges(' + element.tituloID + ')"" value=' + element.tituloID + ' type=""checkbox"" class=""checkbox_check"" name=""checkbox_check[]""></td>';

                    } else {
                        //console.log(""YA ESTA PUSHEADO:"" + idPushed)
                        cuerpo_columnas = cuerpo_columnas + '<td><input onclick=""fnCheckColumnChanges(' + element.tituloID + ')"" value=' + element.tituloID + ' type=""checkbox"" class=""checkbox_check"" name=""checkbox_check[]"" checked></td>';
                    }
                    cuerpo_columnas = cuerpo_columnas + '<td><span class=""text-muted"">' + element.titulo + '</span></td>';

                    cuerpo_columnas = cuerpo_columnas + '</tr>';

                });
                cuerpo_columnas = cuerpo_columnas + '</tbody>';

         ");
                WriteLiteral(@"       $('#tblAdminColumnas').append(cuerpo_columnas).fadeIn(300000);

                //------------------------------------------> Modal Cancel - Apply Options

                option_btns = option_btns + '<div class=""modal-footer"" id=""footer_columns_options"">';
                option_btns = option_btns + '<button type=""button"" class=""btn me-auto"" data-bs-dismiss=""modal"">Cancelar</button>';
                option_btns = option_btns + '<button onclick=""fnApplyColumnChanges(`' + loadedTree + '`);"" type=""button"" class=""btn btn-primary"" data-bs-dismiss=""modal"">Mostrar</button>';
                option_btns = option_btns + '</div>';

                $('#modalContent').append(option_btns).fadeIn(300000);
            });
        }

        //------------------------------>>> Chekar todos los checkboxes de los campos de las columnas
        $(document).on('change', 'input[id=""checkAll""]', function () {
            checkedColumns = [];
            $('.checkbox_check').prop(""checked"", this.checked);
");
                WriteLiteral(@"
            $(""input[name='checkbox_check[]']:checked"").each(function () {
                //alert(""Id: "" + $(this).attr(""id"") + "" Value: "" + $(this).val());
                checkedColumns.push(new columnId($(this).val()));
            });
            //console.log(checkedColumns);
        });
        //----------------------------------------------------------> Manejo individual de los checkboxes de la función anterior.
        function fnCheckColumnChanges() {

            if ($('input.checkbox_check').is(':checked') == true) {
                checkedColumns = [];
                var m = jQuery('input:checkbox[class=checkbox_check]:checked').length;
                if (m > 0) {
                    jQuery('input:checkbox[class=checkbox_check]:checked').each(function () {

                        checkedColumns.push(new columnId($(this).val()));
                    });
                }
                //console.log(checkedColumns);
            } else {
                checkedColumns = [");
                WriteLiteral(@"];
                Swal.fire('ADVERTENCIA', 'No seleccionaste ninguna columna', 'warning')
            }
        }

        function fnApplyColumnChanges(loadedTree) {

            //mostrar columnas de los checkboxes checkeados.
            checkedColumns.forEach(function (checked_element) {

                var columnIndex = $('#' + loadedTree + '_colname_' + checked_element.idElement).parent().index() + 1;
                $('#' + loadedTree + ' td:nth-child(' + columnIndex + '),th:nth-child(' + columnIndex + ')').show();

            });

            //ocultar columnas de los checkboxes no checkeados.
            var unCheckedColumns = $(""input:checkbox:not(:checked)"").length;
            if (unCheckedColumns > 0) {
                jQuery(""input:checkbox:not(:checked)"").each(function () {

                    var columnIndex = $('#' + loadedTree + '_colname_' + $(this).val()).parent().index() + 1;
                    $('#' + loadedTree + ' td:nth-child(' + columnIndex + '),th:nth-child");
                WriteLiteral(@"(' + columnIndex + ')').hide();

                });
            }
        }
        //------------------------------------------------------>> Setear segundo campo.
        var checkedCampos = [];
        function campo(valor) {
            this.valor = valor;
        };

        //-----> Para identificar cuales campos ya se encuentran formando el segundo campo.
        var alreadyCheckedCampos = [];
        function Field(val) {
            this.val = val;
        };

        function buildSecondInput(childNodes, loadedTree, settedFields) {           
            //console.log(""Nodos hijos:"")
            //console.log(childNodes)

            //-----> Para identificar cuales campos ya se encuentran formando el segundo campo.
            const settedCampos = settedFields.split("" - "");
            settedCampos.forEach(function (f) {
                alreadyCheckedCampos.push(new Field(f))               
            });
            alreadyCheckedCampos.splice(-1)            

       ");
                WriteLiteral(@"     //------------>> id del nodo padre en donde se formará el segundo campo.
            var id = childNodes[0].parent.data.id;

            $('#footer_options').remove();
            var footerBtns = """";

            $('#tbodyAdminCampos').remove();
            var tableChildNodes = """";

            tableChildNodes = tableChildNodes + '<tbody id=""tbodyAdminCampos"">';

            childNodes.forEach(function element(treeNode, index, array) {                  

                if (treeNode.children != null) {                   

                    tableChildNodes = tableChildNodes + '<tr class=""header naranja"" style=""cursor:pointer;"">';
                    tableChildNodes = tableChildNodes + '<td><input onclick=""fnCheckFieldChanges(`' + treeNode.data.descripcion + '`)"" value=""' + treeNode.data.descripcion + '"" type=""checkbox"" class=""checkbox_check_campo"" name=""checkbox_check_campo[]""></td>';
                    tableChildNodes = tableChildNodes + '<td><span class=""text-muted"">' + treeNode.ti");
                WriteLiteral(@"tle + '</span></td>';
                    tableChildNodes = tableChildNodes + '<td><span class=""text-muted"">' + treeNode.data.descripcion + '</span></td>';
                    tableChildNodes = tableChildNodes + '</tr>';                   

                    treeNode.children.forEach(function element(treeSonNode1, index, array) {

                        const pField1 = alreadyCheckedCampos.find(x => x.val == treeSonNode1.data.descripcion);
                        //console.log(pField1)

                        if (treeSonNode1.children != null) {

                            if (typeof (pField1) === 'undefined') {
                                tableChildNodes = tableChildNodes + '<tr class="""" style=""cursor:pointer;"">';
                                tableChildNodes = tableChildNodes + '<td><input onclick=""fnCheckFieldChanges(`' + treeSonNode1.data.descripcion + '`)"" value=""' + treeSonNode1.data.descripcion + '"" type=""checkbox"" class=""checkbox_check_campo"" name=""checkbox_check_campo[]""></td>");
                WriteLiteral(@"';
                                tableChildNodes = tableChildNodes + '<td><span class=""text-muted""> -->' + treeSonNode1.title + '</span></td>';
                                tableChildNodes = tableChildNodes + '<td><span class=""text-muted""> ' + treeSonNode1.data.descripcion + '</span></td>';
                                tableChildNodes = tableChildNodes + '</tr>';

                            } else { //---------->> checkboxes chekados de los campos que se han encontrado ya formando el 2 campo.
                                tableChildNodes = tableChildNodes + '<tr class="""" style=""cursor:pointer;"">';
                                tableChildNodes = tableChildNodes + '<td><input onclick=""fnCheckFieldChanges(`' + treeSonNode1.data.descripcion + '`)"" value=""' + treeSonNode1.data.descripcion + '"" type=""checkbox"" class=""checkbox_check_campo"" name=""checkbox_check_campo[]"" checked></td>';
                                tableChildNodes = tableChildNodes + '<td><span class=""text-muted""> -->' + treeSo");
                WriteLiteral(@"nNode1.title + '</span></td>';
                                tableChildNodes = tableChildNodes + '<td><span class=""text-muted""> ' + treeSonNode1.data.descripcion + '</span></td>';
                                tableChildNodes = tableChildNodes + '</tr>';
                            }  


                            treeSonNode1.children.forEach(function element(treeSonNode2, index, array) {

                                const pField2 = alreadyCheckedCampos.find(x => x.val == treeSonNode2.data.descripcion);
                                //console.log(pField2)

                                if (typeof (pField2) === 'undefined') {

                                    tableChildNodes = tableChildNodes + '<tr class="""" style=""cursor:pointer;"">';
                                    tableChildNodes = tableChildNodes + '<td><input onclick=""fnCheckFieldChanges(`' + treeSonNode2.data.descripcion + '`)"" value=""' + treeSonNode2.data.descripcion + '"" type=""checkbox"" class=""checkbox_check_campo"" nam");
                WriteLiteral(@"e=""checkbox_check_campo[]""></td>';
                                    tableChildNodes = tableChildNodes + '<td><span class=""text-muted""> ---->' + treeSonNode2.title + '</span></td>';
                                    tableChildNodes = tableChildNodes + '<td><span class=""text-muted""> ' + treeSonNode2.data.descripcion + '</span></td>';
                                    tableChildNodes = tableChildNodes + '</tr>';

                                } else {//---------->> checkboxes chekados de los campos que se han encontrado ya formando el 2 campo.

                                    tableChildNodes = tableChildNodes + '<tr class="""" style=""cursor:pointer;"">';
                                    tableChildNodes = tableChildNodes + '<td><input onclick=""fnCheckFieldChanges(`' + treeSonNode2.data.descripcion + '`)"" value=""' + treeSonNode2.data.descripcion + '"" type=""checkbox"" class=""checkbox_check_campo"" name=""checkbox_check_campo[]"" checked></td>';
                                    tableChildNodes =");
                WriteLiteral(@" tableChildNodes + '<td><span class=""text-muted""> ---->' + treeSonNode2.title + '</span></td>';
                                    tableChildNodes = tableChildNodes + '<td><span class=""text-muted""> ' + treeSonNode2.data.descripcion + '</span></td>';
                                    tableChildNodes = tableChildNodes + '</tr>';

                                }                                

                            });

                        } else {

                            tableChildNodes = tableChildNodes + '<tr>';
                            tableChildNodes = tableChildNodes + '<td><input onclick=""fnCheckFieldChanges(`' + treeSonNode1.data.descripcion + '`)"" value=""' + treeSonNode1.data.descripcion + '"" type=""checkbox"" class=""checkbox_check_campo"" name=""checkbox_check_campo[]""></td>';
                            tableChildNodes = tableChildNodes + '<td><span class=""text-muted""> -->' + treeSonNode1.title + '</span></td>';
                            tableChildNodes = tableChildN");
                WriteLiteral(@"odes + '<td><span class=""text-muted""> ' + treeSonNode1.data.descripcion + '</span></td>';
                            tableChildNodes = tableChildNodes + '</tr>';

                        }                            
                    });

                } else {

                    const pField = alreadyCheckedCampos.find(x => x.val == treeNode.data.descripcion);
                   /* console.log(pField)*/

                    tableChildNodes = tableChildNodes + '<tr class=""header"">';

                    if (typeof (pField) === 'undefined') {

                        tableChildNodes = tableChildNodes + '<td><input onclick=""fnCheckFieldChanges(`' + treeNode.data.descripcion + '`)"" value=""' + treeNode.data.descripcion + '"" type=""checkbox"" class=""checkbox_check_campo"" name=""checkbox_check_campo[]""></td>';
                        tableChildNodes = tableChildNodes + '<td><span class=""text-muted"">' + treeNode.title + '</span></td>';
                        tableChildNodes = tableChildNodes +");
                WriteLiteral(@" '<td><span class=""text-muted"">' + treeNode.data.descripcion + '</span></td>';

                    } else { //---------->> checkboxes chekados de los campos que se han encontrado ya formando el 2 campo.

                        tableChildNodes = tableChildNodes + '<td><input onclick=""fnCheckFieldChanges(`' + treeNode.data.descripcion + '`)"" value=""' + treeNode.data.descripcion + '"" type=""checkbox"" class=""checkbox_check_campo"" name=""checkbox_check_campo[]"" checked></td>';
                        tableChildNodes = tableChildNodes + '<td><span class=""text-muted"">' + treeNode.title + '</span></td>';
                        tableChildNodes = tableChildNodes + '<td><span class=""text-muted"">' + treeNode.data.descripcion + '</span></td>';
                    }                    

                    tableChildNodes = tableChildNodes + '</tr>';
                }                
            });
            tableChildNodes = tableChildNodes + '</tbody>';

            $('#tblAdminSecondInput').append(tabl");
                WriteLiteral(@"eChildNodes).fadeIn(300000);
            //------------------------------------------> Modal Cancel - Apply Options
            footerBtns = footerBtns + '<div class=""modal-footer"" id=""footer_options"">';
            footerBtns = footerBtns + '<button type=""button"" class=""btn me-auto"" data-bs-dismiss=""modal"">Cancelar</button>';
            footerBtns = footerBtns + '<button id=""btnApplySecondField"" onclick=""fnSetSecondFieldValue(`' + loadedTree + '`, ' + id +');"" style=""display:none"" type=""button"" class=""btn btn-primary"" data-bs-dismiss=""modal"">Aplicar</button>';
            footerBtns = footerBtns + '</div>';

            $('#modalContentFields').append(footerBtns).fadeIn(300000);

            //desglose de columnas para seleccionar los hijos de los hijos
            //$('#tblAdminSecondInput tr:not(.header)').hide();
            //$('#tblAdminSecondInput .header').click(function () {
            //    $(this).nextUntil('tr.header').slideToggle(300);
            //});
        }

        
    ");
                WriteLiteral(@"    //------------------------------>>> Chekar todos los checkboxes de los campos hijos
        $(document).on('change', 'input[id=""checkAllDatosHijos""]', function () {
            checkedCampos = [];
            $('.checkbox_check_campo').prop(""checked"", this.checked);
            $(""input[name='checkbox_check_campo[]']:checked"").each(function () {
                //alert(""Id: "" + $(this).attr(""id"") + "" Value: "" + $(this).val());
                checkedCampos.push(new campo($(this).val()));
            });
            if (checkedCampos.length > 0) {
                $('#btnApplySecondField').show();
            } else {
                $('#btnApplySecondField').hide();
            }
            //console.log(checkedCampos);
        });
        //----------------------------------------------------------> Manejo individual de los checkboxes de la función anterior.
        function fnCheckFieldChanges(valor) {
            //console.log(valor);
            if ($('input.checkbox_check_campo').is");
                WriteLiteral(@"(':checked') == true) {
                checkedCampos = [];
                var m = jQuery('input:checkbox[class=checkbox_check_campo]:checked').length;
                if (m > 0) {
                    jQuery('input:checkbox[class=checkbox_check_campo]:checked').each(function () {
                        checkedCampos.push(new campo($(this).val()));
                    });
                    $('#btnApplySecondField').show();
                }
                //console.log(checkedCampos);               
            } else {
                checkedCampos = [];
                $('#btnApplySecondField').hide();                
            }
        }

        function fnSetSecondFieldValue(loadedTree, id) {
            //console.log(loadedTree);
            var builtField = """";

            checkedCampos.forEach(function (campo) {                
                builtField = builtField + campo.valor + "" - "";
            });          

            $.ajax({
                type: ""POST"",
 ");
                WriteLiteral(@"               dataType: ""json"",
                url: ""/Home/funUpdateLvlDescriptionFromChilds"",
                data: {
                    ""Id"": id,
                    ""descriptionfromchilds"": builtField
                },
                success: function (response) {                    
                    if (response > 0) {
                        //console.log(response);
                        var tree = $('#' + loadedTree).fancytree('getTree');// para obtener el arbol renderizado.
                        var nodo = tree.getActiveNode(); // para obtener el nodo activo.            
                        nodo.parent.resetLazy(); //resetear nodo para ver cambios reflejados
                    } else {
                        Swal.fire('ERROR', 'Hubo un problema con la creación del segundo campo.', 'error')
                    }
                },
            });
        }
        //----------------------------------------------------->> FIN Seteo de segundo campo.

        //------");
                WriteLiteral(@"----------------------------------------------->> Obteniendo estilos
        async function getStyles(lvlID) {
            return styles = await getStylesFromDB(lvlID);
        };

        function getStylesFromDB(lvlID) {

            var urlToGo = """";
            var dataToGo;
            //------------------------>>AJAX Obtener estilos
            return $.ajax({
                type: ""GET"",
                dataType: ""json"",
                url: ""/Home/funGetLevelStyles"",
                data: {
                    ""nivelID"": lvlID
                },
                success: function (response) {
                    //console.log(response);
                },
            });
            //------------------------>>AJAX Obtener estilos
        }
        //----------------------------------------------------->> Obteniendo estilos

        //----------------------------------------------------->> Aplicando estilos
        async function applyOrRemoveStyle(lvlID, style, action, campo)");
                WriteLiteral(@" {
            return styleReponse = await applyOrRemoveStyleToDB(lvlID, style, action, campo);
        };

        function applyOrRemoveStyleToDB(lvlID, style, action, campo) {

            var urlToGo = """";
            var dataToGo;

            if (action == ""STYLE_APPLY"") {

                urlToGo = ""/Home/funInsertLvlStyle"";
                dataToGo = { ""nivelID"": lvlID, ""style"": style, ""campo"": campo }

                //------------------------>>AJAX Aplicar estilo
                return $.ajax({
                    type: ""POST"",
                    dataType: ""json"",
                    url: urlToGo,
                    data: dataToGo,
                    success: function (response) {
                        //console.log(response);
                    },
                });
                //------------------------>>AJAX Aplicar estilo
            } else if (action == ""STYLE_REMOVE"") {

                urlToGo = ""/Home/funDeleteStyle"";
                dataToGo = { ""nive");
                WriteLiteral(@"lID"": lvlID, ""style"": style, ""campo"": campo }

                //------------------------>>AJAX Aplicar estilo
                return $.ajax({
                    type: ""POST"",
                    dataType: ""json"",
                    url: urlToGo,
                    data: dataToGo,
                    success: function (response) {
                        //console.log(response);
                    },
                });
            }
        }
        //----------------------------------------------------->> Aplicando estilos


        //---------------------------->> removiendo estilos: COLORES Y FUENTES:
        async function removeColorsAndSizes(lvlID) {
            return removes = await removeColorsAndSizesToDB(lvlID);
        };

        function removeColorsAndSizesToDB(lvlID) {        

                //------------------------>>AJAX quitar estilos colores y fuentes
                return $.ajax({
                    type: ""POST"",
                    dataType: ""json"",");
                WriteLiteral(@"
                    url: ""/Home/funRemoveColorsAndSizes"",
                    data: { ""nivelID"": lvlID },
                    success: function (response) {
                        //console.log(response);
                    },
                });
                //------------------------>>AJAX quitar estilos colores y fuentes   
        }
        //---------------------------->> removiendo estilos: COLORES Y FUENTES

        var arrayHijos = [];

        function addNHijos() {

            arrayHijos = [];

            var vCant = $('#txtCantidad').val();
            var vNombre = $('#txtNombreBase').val();
            var vIDparent = $('#txtIdParent').val();
            var vIDproject = $('#txtPyID').val();
            var treeSelected = $('#txtTree').val();

            if (vCant != """" && vCant != null) {
                arrayHijos.push(vCant);
            } if (vNombre != """" && vNombre != null) {
                arrayHijos.push(vNombre);
            }
            var nroCampo");
                WriteLiteral(@"sLlenos = arrayHijos.length;
            if (nroCamposLlenos == 2) {

                Swal.fire({ title: 'Añadiendo ' + vCant + ' Niveles...', allowOutsideClick: false, showConfirmButton: false })

                var rpt = addNHijosAsync(vCant, vNombre, vIDparent, vIDproject)
                rpt.then(function (response) {

                    //console.log(response);
                    if (response >= 1) {

                        $('#txtIdParent').val("""");
                        $('#txtCantidad').val("""");
                        $('#txtNombreBase').val("""");
                        $('#txtPyID').val("""");

                        $('#modal-utilities').modal('toggle');

                        Swal.fire('Niveles añadidos !', '', 'success').then((result) => {

                            var tree = $(""#"" + treeSelected).fancytree(""getTree""); // para obtener el arbol renderizado.
                            var nodo = tree.getActiveNode(); // para obtener el nodo activo.

               ");
                WriteLiteral(@"             nodo.parent.resetLazy(); //recargamos el nodo parent para cargar los id de los n elementos ingresados.
                        });

                        $('#txtTree').val("""");

                    } else {
                        Swal.fire('ERROR', 'Hubo un problema', 'error')
                    }
                })

            } else {
                Swal.fire('ADVERTENCIA', 'Complete ambos campos', 'warning')
            }
        }

        async function addNHijosAsync(vCant, vNombre, vIDparent, vIDproject) {
            return hijos = await addHijosInDB(vCant, vNombre, vIDparent, vIDproject);
        };

        function addHijosInDB(vCant, vNombre, vIDparent, vIDproject) {
            return $.ajax({
                type: ""POST"",
                url: ""/Home/funInsertNLvls"",
                data: {
                    ""cantidad"": vCant,
                    ""nombreBase"": vNombre,
                    ""parent"": vIDparent,
                    ""projectID"": vIDproj");
                WriteLiteral(@"ect,
                },
                success: function (response) {
                },
            });
        }

        //-------------------------------- Duplicar Niveles.
        async function duplicateLevels(vId,vPid,idPy,qty) {
            return dups = await duplicateLevelsInDB(vId, vPid, idPy, qty);
        };

        function duplicateLevelsInDB(vId, vPid, idPy, qty) {
            return $.ajax({
                type: ""POST"",
                url: ""/Home/funDuplicateLevels"",
                data: {
                    ""vId"": vId,
                    ""vParentId"": vPid,
                    ""projectId"": idPy,
                    ""cantidad"": qty,
                },
                success: function (response) {
                    //console.log(response);
                },
            });
        }

        var colorsandsizes = [];

        function estilo(valor,campo, tipo) {
            this.valor = valor;
            this.campo = campo;
            this.tipo = tip");
                WriteLiteral(@"o;
        };

        function fnApplyColors() {

            var arbol = $('#txtGetTree').val();
            
            colorsandsizes = [];
        
            const firstColor = $('input[name=color]:checked').val();
            const secondColor = $('input[name=color-rounded]:checked').val();

            const firstSize = $('input[name=first-size]:checked').val();
            const secondSize = $('input[name=second-size]:checked').val();

            if (firstColor != """") {
                colorsandsizes.push(new estilo(firstColor, ""titulo"", ""color""))
            } if (secondColor != """") {
                colorsandsizes.push(new estilo(secondColor, ""descripcion"", ""color""))
            } if (firstSize != """") {
                colorsandsizes.push(new estilo(firstSize, ""titulo"", ""size""))
            } if (secondSize != """") {
                colorsandsizes.push(new estilo(secondSize, ""descripcion"", ""size""))
            }

            if (colorsandsizes.length > 0) {       
      ");
                WriteLiteral(@"                         

                var selectedNodes = $.ui.fancytree.getTree(""#"" + arbol).getSelectedNodes();
                if (selectedNodes.length > 0) {

                    selectedNodes.forEach(function element(node) {

                        console.log(node.data.id);

                        var rpt1 = removeColorsAndSizes(node.data.id)
                        rpt1.then(function (res1) {
                            //console.log(""Eliminando>"" + res1)

                            colorsandsizes.forEach(function element(elemento, index, array) {

                                //console.log(elemento.valor, elemento.campo)                    

                                var rpt2 = applyOrRemoveStyle(node.data.id, elemento.valor, ""STYLE_APPLY"", elemento.campo)
                                rpt2.then(function (styleresponse) {

                                    //console.log(""Aplicando>"" + styleresponse);

                                    if (elemento.tipo == """);
                WriteLiteral(@"color"") {
                                        if (elemento.campo == ""titulo"") {
                                            node.span.children[2].children[0].style.color = elemento.valor; //titulo
                                        } else if (elemento.campo == ""descripcion"") {
                                            node.span.children[2].children[1].style.color = elemento.valor; //descripcion
                                        }
                                    } else {
                                        if (elemento.campo == ""titulo"") {
                                            node.span.children[2].children[0].style.fontSize = elemento.valor; //titulo
                                        } else if (elemento.campo == ""descripcion"") {
                                            node.span.children[2].children[1].style.fontSize = elemento.valor; //descripcion
                                        }
                                    }
                              ");
                WriteLiteral(@"  });

                                $('#modal-color-admin').modal('toggle');
                            });
                        });

                    });

                }
                else {

                    var nodoId = $('#txtNodoId').val();                    

                    var tree = $(""#"" + arbol).fancytree(""getTree""); // para obtener el arbol renderizado.
                    var nodo = tree.getActiveNode(); // para obtener el nodo activo.  

                     var rpt1 = removeColorsAndSizes(nodoId)
                        rpt1.then(function (res1) {
                            //console.log(""Eliminando>"" + res1)

                            colorsandsizes.forEach(function element(elemento, index, array) {

                                //console.log(elemento.valor, elemento.campo)                    

                                var rpt2 = applyOrRemoveStyle(nodoId, elemento.valor, ""STYLE_APPLY"", elemento.campo)
                               ");
                WriteLiteral(@" rpt2.then(function (styleresponse) {

                                    //console.log(""Aplicando>"" + styleresponse);

                                    if (elemento.tipo == ""color"") {
                                        if (elemento.campo == ""titulo"") {
                                            nodo.span.children[2].children[0].style.color = elemento.valor; //titulo
                                        } else if (elemento.campo == ""descripcion"") {
                                            nodo.span.children[2].children[1].style.color = elemento.valor; //descripcion
                                        }
                                    } else {
                                        if (elemento.campo == ""titulo"") {
                                            nodo.span.children[2].children[0].style.fontSize = elemento.valor; //titulo
                                        } else if (elemento.campo == ""descripcion"") {
                                            nodo.span.c");
                WriteLiteral(@"hildren[2].children[1].style.fontSize = elemento.valor; //descripcion
                                        }
                                    }
                                });

                                $('#modal-color-admin').modal('toggle');
                            });
                        }); 
                }                             
            }            
        }       

        var tableToExcel = (function () {
            var uri = 'data:application/vnd.ms-excel;base64,'
                , template = '<html xmlns:o=""urn:schemas-microsoft-com:office:office"" xmlns:x=""urn:schemas-microsoft-com:office:excel"" xmlns=""http://www.w3.org/TR/REC-html40""><head><!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>{worksheet}</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]--></head><body><table>{table}</table></body></html>'
                , ");
                WriteLiteral(@"base64 = function (s) { return window.btoa(unescape(encodeURIComponent(s))) }
                , format = function (s, c) { return s.replace(/{(\w+)}/g, function (m, p) { return c[p]; }) }
            return function (table, name) {
                if (!table.nodeType) table = document.getElementById(table)
                var ctx = { worksheet: name || 'Worksheet', table: table.innerHTML }
                window.location.href = uri + base64(format(template, ctx))
            }
        })()

        //function addColumn(tree, nodoId) {
        //    console.log(tree,nodoId)
        //    $('#' + tree + ' thead tr').append('<th id=th' + nodoId +'>Col</th>');
        //    $('#' + tree + ' tbody tr').append('<td id=td' + nodoId +'><input type=""text"" placeholder=""Ingrese algo""></td>');
        //}

    </script>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "16f7ef06750d6ef1c531f6c2946b92076f0843b4158959", async() => {
                WriteLiteral("\r\n\r\n    <ul class=\"nav nav-tabs nav-fill\" data-bs-toggle=\"tabs\">\r\n\r\n");
#nullable restore
#line 2485 "C:\Users\didie\source\repos\ModeladorApp\ModeladorApp\Views\Home\Arbol.cshtml"
         foreach (var item in Model)
        {
            if (item.ProyectoID == ViewBag.firstPyID)
            {

#line default
#line hidden
#nullable disable
                WriteLiteral("                <li class=\"nav-item\">\r\n                    <a");
                BeginWriteAttribute("href", " href=\"", 145655, "\"", 145688, 2);
                WriteAttributeValue("", 145662, "#proyecto_", 145662, 10, true);
#nullable restore
#line 2490 "C:\Users\didie\source\repos\ModeladorApp\ModeladorApp\Views\Home\Arbol.cshtml"
WriteAttributeValue("", 145672, item.ProyectoID, 145672, 16, false);

#line default
#line hidden
#nullable disable
                EndWriteAttribute();
                BeginWriteAttribute("onclick", " onclick=\"", 145689, "\"", 145744, 6);
                WriteAttributeValue("", 145699, "loadTree(\'", 145699, 10, true);
#nullable restore
#line 2490 "C:\Users\didie\source\repos\ModeladorApp\ModeladorApp\Views\Home\Arbol.cshtml"
WriteAttributeValue("", 145709, item.ProyectoID, 145709, 16, false);

#line default
#line hidden
#nullable disable
                WriteAttributeValue("", 145725, "\',", 145725, 2, true);
                WriteAttributeValue(" ", 145727, "\'", 145728, 2, true);
#nullable restore
#line 2490 "C:\Users\didie\source\repos\ModeladorApp\ModeladorApp\Views\Home\Arbol.cshtml"
WriteAttributeValue("", 145729, item.Permiso, 145729, 13, false);

#line default
#line hidden
#nullable disable
                WriteAttributeValue("", 145742, "\')", 145742, 2, true);
                EndWriteAttribute();
                WriteLiteral(" class=\"nav-link active\"\r\n                       data-bs-toggle=\"tab\"><strong>");
#nullable restore
#line 2491 "C:\Users\didie\source\repos\ModeladorApp\ModeladorApp\Views\Home\Arbol.cshtml"
                                               Write(Html.DisplayFor(modelItem => item.TB_PROYECTO.NombreProyecto));

#line default
#line hidden
#nullable disable
                WriteLiteral("</strong>(");
#nullable restore
#line 2491 "C:\Users\didie\source\repos\ModeladorApp\ModeladorApp\Views\Home\Arbol.cshtml"
                                                                                                                       Write(item.Permiso);

#line default
#line hidden
#nullable disable
                WriteLiteral(")</a>\r\n                </li>\r\n");
#nullable restore
#line 2493 "C:\Users\didie\source\repos\ModeladorApp\ModeladorApp\Views\Home\Arbol.cshtml"

            }
            else
            {

#line default
#line hidden
#nullable disable
                WriteLiteral("                <li class=\"nav-item\">\r\n                    <a");
                BeginWriteAttribute("href", " href=\"", 146049, "\"", 146082, 2);
                WriteAttributeValue("", 146056, "#proyecto_", 146056, 10, true);
#nullable restore
#line 2498 "C:\Users\didie\source\repos\ModeladorApp\ModeladorApp\Views\Home\Arbol.cshtml"
WriteAttributeValue("", 146066, item.ProyectoID, 146066, 16, false);

#line default
#line hidden
#nullable disable
                EndWriteAttribute();
                BeginWriteAttribute("onclick", " onclick=\"", 146083, "\"", 146138, 6);
                WriteAttributeValue("", 146093, "loadTree(\'", 146093, 10, true);
#nullable restore
#line 2498 "C:\Users\didie\source\repos\ModeladorApp\ModeladorApp\Views\Home\Arbol.cshtml"
WriteAttributeValue("", 146103, item.ProyectoID, 146103, 16, false);

#line default
#line hidden
#nullable disable
                WriteAttributeValue("", 146119, "\',", 146119, 2, true);
                WriteAttributeValue(" ", 146121, "\'", 146122, 2, true);
#nullable restore
#line 2498 "C:\Users\didie\source\repos\ModeladorApp\ModeladorApp\Views\Home\Arbol.cshtml"
WriteAttributeValue("", 146123, item.Permiso, 146123, 13, false);

#line default
#line hidden
#nullable disable
                WriteAttributeValue("", 146136, "\')", 146136, 2, true);
                EndWriteAttribute();
                WriteLiteral(" class=\"nav-link\"\r\n                       data-bs-toggle=\"tab\">");
#nullable restore
#line 2499 "C:\Users\didie\source\repos\ModeladorApp\ModeladorApp\Views\Home\Arbol.cshtml"
                                       Write(Html.DisplayFor(modelItem => item.TB_PROYECTO.NombreProyecto));

#line default
#line hidden
#nullable disable
                WriteLiteral(" (");
#nullable restore
#line 2499 "C:\Users\didie\source\repos\ModeladorApp\ModeladorApp\Views\Home\Arbol.cshtml"
                                                                                                       Write(item.Permiso);

#line default
#line hidden
#nullable disable
                WriteLiteral(")</a>\r\n                </li>\r\n");
#nullable restore
#line 2501 "C:\Users\didie\source\repos\ModeladorApp\ModeladorApp\Views\Home\Arbol.cshtml"
            }
        }

#line default
#line hidden
#nullable disable
                WriteLiteral("\r\n        <li class=\"nav-item\">\r\n            <a href=\"#master\" onclick=\"loadTree(0)\" class=\"nav-link\"\r\n               data-bs-toggle=\"tab\">MASTER</a>\r\n        </li>\r\n\r\n    </ul>\r\n\r\n    <div class=\"card\">\r\n\r\n");
                WriteLiteral(@"        <div class=""card-body"" id=""loader"">
            <div class=""empty"">
                <div class=""empty-img"">
                    <img src=""https://miro.medium.com/max/875/1*CsJ05WEGfunYMLGfsT2sXA.gif"" height=""128"">
                </div>
                <p class=""empty-title"">Cargando proyectos...</p>
            </div>
        </div>
");
                WriteLiteral(@"
        <div class=""tab-content"">

            <div class=""tab-pane"" id=""proyecto_0"">

                <div class=""row align-items-center"">
                    <div class=""col-auto ms-auto d-print-none"">
                        <div class=""btn-list"">

                            <span class=""d-none d-sm-inline"">
                                <a href=""#"" class=""btn btn-primary"" onclick=""loadColumnas('tree_0',0);"" data-bs-toggle=""modal"" data-bs-target=""#modal-simple"">
                                    Columnas
                                </a>
                            </span>


                            <span class=""d-none d-sm-inline"">
                                <a onclick=""tableToExcel('tree_0', 'Modelador_Master')"" style=""cursor:pointer"" href=""#"" class=""btn btn-secondary"">
                                    EXCEL
                                </a>
                            </span>

                            <span class=""d-none d-sm-inline"">
                    ");
                WriteLiteral("            <a onclick=\"fnExpandNodes(0)\" class=\"btn btn-secondary\">\r\n                                    Expandir\r\n                                </a>\r\n                            </span>\r\n\r\n");
                WriteLiteral(@"
                        </div>
                    </div>
                </div>

                <table id=""tree_0"">
                    <colgroup>
                        <col width=""2%"" />
                        <col width=""88%"" />
                        <col width=""1%"" />
                    </colgroup>
                    <thead>
                        <tr id=""head_tree_0"">
                            <th>#</th>
                            <th></th>
");
                WriteLiteral(@"                        </tr>
                    </thead>
                    <tbody>
                        <!-- Define a row template for all invariant markup: -->
                        <tr>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
");
                WriteLiteral("\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n\r\n            </div>\r\n\r\n");
#nullable restore
#line 2637 "C:\Users\didie\source\repos\ModeladorApp\ModeladorApp\Views\Home\Arbol.cshtml"
             foreach (var item in Model)
            {

#line default
#line hidden
#nullable disable
                WriteLiteral("                <div class=\"tab-pane\"");
                BeginWriteAttribute("id", " id=\"", 151649, "\"", 151679, 2);
                WriteAttributeValue("", 151654, "proyecto_", 151654, 9, true);
#nullable restore
#line 2639 "C:\Users\didie\source\repos\ModeladorApp\ModeladorApp\Views\Home\Arbol.cshtml"
WriteAttributeValue("", 151663, item.ProyectoID, 151663, 16, false);

#line default
#line hidden
#nullable disable
                EndWriteAttribute();
                WriteLiteral(@">

                    <div class=""row align-items-center"">
                        <div class=""col-auto ms-auto d-print-none"">
                            <div class=""btn-list"">

                                <span class=""d-none d-sm-inline"">
                                    <a href=""#"" class=""btn btn-primary""");
                BeginWriteAttribute("onclick", " onclick=\"", 152004, "\"", 152071, 5);
                WriteAttributeValue("", 152014, "loadColumnas(\'tree_", 152014, 19, true);
#nullable restore
#line 2646 "C:\Users\didie\source\repos\ModeladorApp\ModeladorApp\Views\Home\Arbol.cshtml"
WriteAttributeValue("", 152033, item.ProyectoID, 152033, 16, false);

#line default
#line hidden
#nullable disable
                WriteAttributeValue("", 152049, "\',\'", 152049, 3, true);
#nullable restore
#line 2646 "C:\Users\didie\source\repos\ModeladorApp\ModeladorApp\Views\Home\Arbol.cshtml"
WriteAttributeValue("", 152052, item.ProyectoID, 152052, 16, false);

#line default
#line hidden
#nullable disable
                WriteAttributeValue("", 152068, "\');", 152068, 3, true);
                EndWriteAttribute();
                WriteLiteral(" data-bs-toggle=\"modal\" data-bs-target=\"#modal-simple\">\r\n                                        Columnas\r\n                                    </a>\r\n                                </span>\r\n\r\n");
                WriteLiteral("\r\n                                <span class=\"d-none d-sm-inline\">\r\n                                    <a");
                BeginWriteAttribute("onclick", " onclick=\"", 152862, "\"", 152903, 3);
                WriteAttributeValue("", 152872, "fnExpandNodes(", 152872, 14, true);
#nullable restore
#line 2660 "C:\Users\didie\source\repos\ModeladorApp\ModeladorApp\Views\Home\Arbol.cshtml"
WriteAttributeValue("", 152886, item.ProyectoID, 152886, 16, false);

#line default
#line hidden
#nullable disable
                WriteAttributeValue("", 152902, ")", 152902, 1, true);
                EndWriteAttribute();
                WriteLiteral(" class=\"btn btn-secondary\">\r\n                                        Expandir\r\n                                    </a>\r\n                                </span>\r\n\r\n");
#nullable restore
#line 2665 "C:\Users\didie\source\repos\ModeladorApp\ModeladorApp\Views\Home\Arbol.cshtml"
                                 if (item.Permiso == "EDITOR")
                                {

#line default
#line hidden
#nullable disable
                WriteLiteral(@"                                    <span class=""d-none d-sm-inline"">
                                        <a onclick=""EdicionInfo()"" class=""btn btn-primary"">
                                            Puedes editar este proyecto
                                        </a>
                                    </span>
");
#nullable restore
#line 2672 "C:\Users\didie\source\repos\ModeladorApp\ModeladorApp\Views\Home\Arbol.cshtml"
                                }

#line default
#line hidden
#nullable disable
                WriteLiteral("                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                    <table");
                BeginWriteAttribute("id", " id=\"", 153656, "\"", 153682, 2);
                WriteAttributeValue("", 153661, "tree_", 153661, 5, true);
#nullable restore
#line 2678 "C:\Users\didie\source\repos\ModeladorApp\ModeladorApp\Views\Home\Arbol.cshtml"
WriteAttributeValue("", 153666, item.ProyectoID, 153666, 16, false);

#line default
#line hidden
#nullable disable
                EndWriteAttribute();
                WriteLiteral(@">
                        <colgroup>
                            <col width=""2%"" />
                            <col width=""88%"" />
                            <col width=""1%"" />
                        </colgroup>
                        <thead>
                            <tr");
                BeginWriteAttribute("id", " id=\"", 153968, "\"", 153999, 2);
                WriteAttributeValue("", 153973, "head_tree_", 153973, 10, true);
#nullable restore
#line 2685 "C:\Users\didie\source\repos\ModeladorApp\ModeladorApp\Views\Home\Arbol.cshtml"
WriteAttributeValue("", 153983, item.ProyectoID, 153983, 16, false);

#line default
#line hidden
#nullable disable
                EndWriteAttribute();
                WriteLiteral(@">
                                <th>#</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Define a row template for all invariant markup: -->
                            <tr>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
");
                WriteLiteral("                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n\r\n                </div>\r\n");
#nullable restore
#line 2750 "C:\Users\didie\source\repos\ModeladorApp\ModeladorApp\Views\Home\Arbol.cshtml"
            }

#line default
#line hidden
#nullable disable
                WriteLiteral(@"
        </div>
    </div>


    <div class=""modal modal-blur fade"" id=""modal-simple"" tabindex=""-1"" role=""dialog"" aria-hidden=""true"">
        <div class=""modal-dialog modal-dialog-centered"" role=""document"">

            <div class=""modal-content"" id=""modalContent"">
                <div class=""modal-header"">
                    <h5 class=""modal-title"">Administración de Columnas</h5>
                    <button type=""button"" class=""btn-close"" data-bs-dismiss=""modal"" aria-label=""Close""></button>
                </div>
                <div class=""modal-body"">

                    Desde aquí podrá elegir las columnas que desee mostrar u ocultar. Haga <br />
                    Check para Mostrarla o <br />
                    Uncheck para Ocultarla.

                    <div class=""table-responsive"">
                        <table id=""tblAdminColumnas"" class=""table card-table table-vcenter text-nowrap datatable"">
                            <thead>
                                <tr>
      ");
                WriteLiteral(@"                              <th><input id=""checkAll"" type=""checkbox"" data-parsley-multiple=""checkbox""></th>
                                    <th>Nombre de Columna</th>
                                </tr>
                            </thead>

                        </table>
                    </div>

                </div>

            </div>
        </div>
    </div>

    <div class=""modal modal-blur fade"" id=""modal-utilities"" tabindex=""-1"" role=""dialog"" aria-hidden=""true"">
        <div class=""modal-dialog modal-lg"" role=""document"">
            <div class=""modal-content"">
                <div class=""modal-header"">
                    <h5 class=""modal-title"">Añadir n elementos hijos</h5>
                    <button type=""button"" class=""btn-close"" data-bs-dismiss=""modal"" aria-label=""Close""></button>
                </div>
                <div class=""modal-body"">
                    <div class=""row"" hidden>
                        <div class=""col-lg-4"">
                          ");
                WriteLiteral(@"  <div class=""mb-3"">
                                <label class=""form-label"">ID Nodo Parent</label>
                                <input id=""txtIdParent"" class=""form-control"">
                            </div>
                        </div>
                        <div class=""col-lg-4"">
                            <div class=""mb-3"">
                                <label class=""form-label"">ProjectID</label>
                                <input id=""txtPyID"" class=""form-control"">
                            </div>
                        </div>
                        <div class=""col-lg-4"">
                            <div class=""mb-3"">
                                <label class=""form-label"">Tree</label>
                                <input id=""txtTree"" class=""form-control"">
                            </div>
                        </div>
                    </div>

                    <div class=""row"">
                        <div class=""col-lg-2"">
                            <");
                WriteLiteral(@"div class=""mb-3"">
                                <label class=""form-label""># Elementos</label>
                                <input id=""txtCantidad"" type=""number"" class=""form-control"">
                            </div>
                        </div>
                        <div class=""col-lg-10"">
                            <div class=""mb-3"">
                                <label class=""form-label"">Nombre base</label>
                                <input id=""txtNombreBase"" type=""text"" class=""form-control"">
                            </div>
                        </div>
                    </div>
                </div>

                <div class=""modal-footer"">
                    <a href=""#"" class=""btn btn-link link-secondary"" data-bs-dismiss=""modal"">
                        Cancelar
                    </a>
                    <a onclick=""addNHijos()"" class=""btn btn-primary ms-auto"">
                        <svg xmlns=""http://www.w3.org/2000/svg""
                             cla");
                WriteLiteral(@"ss=""icon"" width=""24"" height=""24""
                             viewBox=""0 0 24 24"" stroke-width=""2""
                             stroke=""currentColor""
                             fill=""none"" stroke-linecap=""round"" stroke-linejoin=""round"">
                            <path stroke=""none"" d=""M0 0h24v24H0z"" fill=""none"" />
                            <line x1=""12"" y1=""5"" x2=""12"" y2=""19"" />
                            <line x1=""5"" y1=""12"" x2=""19"" y2=""12"" />
                        </svg>
                        Añadir
                    </a>
                </div>
            </div>
        </div>
    </div>


    <div class=""modal modal-blur fade"" id=""modal-second-input"" tabindex=""-1"" role=""dialog"" aria-hidden=""true"">
        <div class=""modal-dialog modal-dialog-centered"" role=""document"">

            <div class=""modal-content"" id=""modalContentFields"">
                <div class=""modal-header"">
                    <h5 class=""modal-title"">Conformar segundo campo</h5>
                    <but");
                WriteLiteral(@"ton type=""button"" class=""btn-close"" data-bs-dismiss=""modal"" aria-label=""Close""></button>
                </div>
                <div class=""modal-body"">

                    Elija los datos de los nodos hijos que desea para conformar su segundo campo.

                    <div class=""table-responsive"">
                        <table id=""tblAdminSecondInput"" class=""table card-table table-vcenter text-nowrap datatable"">
                            <thead>
                                <tr>
                                    <th><input id=""checkAllDatosHijos"" type=""checkbox"" data-parsley-multiple=""checkbox""></th>
                                    <th>Campo</th>
                                    <th>Valor</th>
                                </tr>
                            </thead>

                        </table>
                    </div>

                </div>

            </div>
        </div>
    </div>


    <div class=""modal modal-blur fade"" id=""modal-color-admin"" tabin");
                WriteLiteral(@"dex=""-1"" role=""dialog"" aria-hidden=""true"">
        <div class=""modal-dialog modal-dialog-centered"" role=""document"">

            <div class=""modal-content"" id=""modalColorFields"">
                <div class=""modal-header"">
                    <h5 class=""modal-title"">Aplicar Colores y Tamaños de Fuente</h5>
                    <button type=""button"" class=""btn-close"" data-bs-dismiss=""modal"" aria-label=""Close""></button>
                </div>
                <div class=""modal-body"">

                    <div class=""col-lg-4"">
                        <div class=""mb-3"" hidden>
                            <label class=""form-label"">Id del Nodo</label>
                            <input id=""txtNodoId"" type=""text"" class=""form-control"">
                        </div>
                    </div>
                    <div class=""col-lg-4"">
                        <div class=""mb-3"" hidden>
                            <label class=""form-label"">Arbol Renderizado</label>
                            <input id=");
                WriteLiteral("\"txtGetTree\" type=\"text\" class=\"form-control\">\r\n                        </div>\r\n                    </div>\r\n\r\n");
                WriteLiteral(@"
                    <div class=""mb-3"">
                        <label class=""form-label"">Color de Primer Campo</label>
                        <div class=""row g-2"">

                            <div class=""col-auto"">
                                <label class=""form-colorinput"">
                                    <input name=""color"" type=""radio"" value=""silver"" class=""form-colorinput-input"">
                                    <span style=""background-color:silver"" class=""form-colorinput-color""></span>
                                </label>
                            </div>

                            <div class=""col-auto"">
                                <label class=""form-colorinput"">
                                    <input name=""color"" type=""radio"" value=""lightslategray"" class=""form-colorinput-input"">
                                    <span style=""background-color: lightslategray"" class=""form-colorinput-color""></span>
                                </label>
                     ");
                WriteLiteral(@"       </div>

                            <div class=""col-auto"">
                                <label class=""form-colorinput"">
                                    <input name=""color"" type=""radio"" value=""grey"" class=""form-colorinput-input"">
                                    <span style=""background-color: grey"" class=""form-colorinput-color""></span>
                                </label>
                            </div>

                            <div class=""col-auto"">
                                <label class=""form-colorinput"">
                                    <input name=""color"" type=""radio"" value=""dimgrey"" class=""form-colorinput-input"">
                                    <span style=""background-color:dimgrey"" class=""form-colorinput-color""></span>
                                </label>
                            </div>

                            <div class=""col-auto"">
                                <label class=""form-colorinput"">
                                    <in");
                WriteLiteral("put name=\"color\" type=\"radio\" value=\"dark\" class=\"form-colorinput-input\"");
                BeginWriteAttribute("checked", " checked=\"", 166284, "\"", 166294, 0);
                EndWriteAttribute();
                WriteLiteral(@">
                                    <span class=""form-colorinput-color bg-dark""></span>
                                </label>
                            </div>

                            <div class=""col-auto"">
                                <label class=""form-colorinput"">
                                    <input name=""color"" type=""radio"" value=""blue"" class=""form-colorinput-input"">
                                    <span class=""form-colorinput-color bg-blue""></span>
                                </label>
                            </div>
                            <div class=""col-auto"">
                                <label class=""form-colorinput"">
                                    <input name=""color"" type=""radio"" value=""azure"" class=""form-colorinput-input"">
                                    <span class=""form-colorinput-color bg-azure""></span>
                                </label>
                            </div>
                            <div class=""col-auto"">
  ");
                WriteLiteral(@"                              <label class=""form-colorinput"">
                                    <input name=""color"" type=""radio"" value=""indigo"" class=""form-colorinput-input"">
                                    <span class=""form-colorinput-color bg-indigo""></span>
                                </label>
                            </div>
                            <div class=""col-auto"">
                                <label class=""form-colorinput"">
                                    <input name=""color"" type=""radio"" value=""purple"" class=""form-colorinput-input"">
                                    <span class=""form-colorinput-color bg-purple""></span>
                                </label>
                            </div>
                            <div class=""col-auto"">
                                <label class=""form-colorinput"">
                                    <input name=""color"" type=""radio"" value=""pink"" class=""form-colorinput-input"">
                                    <span c");
                WriteLiteral(@"lass=""form-colorinput-color bg-pink""></span>
                                </label>
                            </div>
                            <div class=""col-auto"">
                                <label class=""form-colorinput"">
                                    <input name=""color"" type=""radio"" value=""red"" class=""form-colorinput-input"">
                                    <span class=""form-colorinput-color bg-red""></span>
                                </label>
                            </div>
                            <div class=""col-auto"">
                                <label class=""form-colorinput"">
                                    <input name=""color"" type=""radio"" value=""orange"" class=""form-colorinput-input"">
                                    <span class=""form-colorinput-color bg-orange""></span>
                                </label>
                            </div>
                            <div class=""col-auto"">
                                <label class=""form");
                WriteLiteral(@"-colorinput"">
                                    <input name=""color"" type=""radio"" value=""yellow"" class=""form-colorinput-input"">
                                    <span class=""form-colorinput-color bg-yellow""></span>
                                </label>
                            </div>
                            <div class=""col-auto"">
                                <label class=""form-colorinput"">
                                    <input name=""color"" type=""radio"" value=""lime"" class=""form-colorinput-input"">
                                    <span class=""form-colorinput-color bg-lime""></span>
                                </label>
                            </div>
                        </div>
                    </div>

");
                WriteLiteral(@"
                    <div class=""mb-3"">
                        <label class=""form-label"">Color de Segundo Campo</label>
                        <div class=""row g-2"">

                            <div class=""col-auto"">
                                <label class=""form-colorinput"">
                                    <input name=""color-rounded"" type=""radio"" value=""silver"" class=""form-colorinput-input"">
                                    <span style=""background-color:silver"" class=""form-colorinput-color rounded-circle""></span>
                                </label>
                            </div>
                            <div class=""col-auto"">
                                <label class=""form-colorinput"">
                                    <input name=""color-rounded"" type=""radio"" value=""lightslategray"" class=""form-colorinput-input"">
                                    <span style=""background-color: lightslategray"" class=""form-colorinput-color rounded-circle""></span>
                  ");
                WriteLiteral(@"              </label>
                            </div>
                            <div class=""col-auto"">
                                <label class=""form-colorinput"">
                                    <input name=""color-rounded"" type=""radio"" value=""grey"" class=""form-colorinput-input"">
                                    <span style=""background-color: grey"" class=""form-colorinput-color rounded-circle""></span>
                                </label>
                            </div>
                            <div class=""col-auto"">
                                <label class=""form-colorinput"">
                                    <input name=""color-rounded"" type=""radio"" value=""dimgrey"" class=""form-colorinput-input"">
                                    <span style=""background-color:dimgrey"" class=""form-colorinput-color rounded-circle""></span>
                                </label>
                            </div>

                            <div class=""col-auto"">
                 ");
                WriteLiteral("               <label class=\"form-colorinput\">\r\n                                    <input name=\"color-rounded\" type=\"radio\" value=\"dark\" class=\"form-colorinput-input\"");
                BeginWriteAttribute("checked", " checked=\"", 172381, "\"", 172391, 0);
                EndWriteAttribute();
                WriteLiteral(@">
                                    <span class=""form-colorinput-color bg-dark rounded-circle""></span>
                                </label>
                            </div>

                            <div class=""col-auto"">
                                <label class=""form-colorinput"">
                                    <input name=""color-rounded"" type=""radio"" value=""blue"" class=""form-colorinput-input"">
                                    <span class=""form-colorinput-color bg-blue rounded-circle""></span>
                                </label>
                            </div>
                            <div class=""col-auto"">
                                <label class=""form-colorinput"">
                                    <input name=""color-rounded"" type=""radio"" value=""azure"" class=""form-colorinput-input"">
                                    <span class=""form-colorinput-color bg-azure rounded-circle""></span>
                                </label>
                            <");
                WriteLiteral(@"/div>
                            <div class=""col-auto"">
                                <label class=""form-colorinput"">
                                    <input name=""color-rounded"" type=""radio"" value=""indigo"" class=""form-colorinput-input"">
                                    <span class=""form-colorinput-color bg-indigo rounded-circle""></span>
                                </label>
                            </div>
                            <div class=""col-auto"">
                                <label class=""form-colorinput"">
                                    <input name=""color-rounded"" type=""radio"" value=""purple"" class=""form-colorinput-input"">
                                    <span class=""form-colorinput-color bg-purple rounded-circle""></span>
                                </label>
                            </div>
                            <div class=""col-auto"">
                                <label class=""form-colorinput"">
                                    <input name=""c");
                WriteLiteral(@"olor-rounded"" type=""radio"" value=""pink"" class=""form-colorinput-input"">
                                    <span class=""form-colorinput-color bg-pink rounded-circle""></span>
                                </label>
                            </div>
                            <div class=""col-auto"">
                                <label class=""form-colorinput"">
                                    <input name=""color-rounded"" type=""radio"" value=""red"" class=""form-colorinput-input"">
                                    <span class=""form-colorinput-color bg-red rounded-circle""></span>
                                </label>
                            </div>
                            <div class=""col-auto"">
                                <label class=""form-colorinput"">
                                    <input name=""color-rounded"" type=""radio"" value=""orange"" class=""form-colorinput-input"">
                                    <span class=""form-colorinput-color bg-orange rounded-circle""></span>
    ");
                WriteLiteral(@"                            </label>
                            </div>
                            <div class=""col-auto"">
                                <label class=""form-colorinput"">
                                    <input name=""color-rounded"" type=""radio"" value=""yellow"" class=""form-colorinput-input"">
                                    <span class=""form-colorinput-color bg-yellow rounded-circle""></span>
                                </label>
                            </div>
                            <div class=""col-auto"">
                                <label class=""form-colorinput"">
                                    <input name=""color-rounded"" type=""radio"" value=""lime"" class=""form-colorinput-input"">
                                    <span class=""form-colorinput-color bg-lime rounded-circle""></span>
                                </label>
                            </div>
                        </div>
                    </div>

                    <div class=""mb-3"">
  ");
                WriteLiteral(@"                      <div class=""form-label"">Tamaño de letra de Primer Campo</div>
                        <div>
                            <label class=""form-check form-check-inline"">
                                <input name=""first-size"" class=""form-check-input"" value=""8px"" type=""radio"">
                                <span class=""form-check-label"" style=""font-size: 8px"">8px</span>
                            </label>
                            <label class=""form-check form-check-inline"">
                                <input name=""first-size"" class=""form-check-input"" value=""10px"" type=""radio"">
                                <span class=""form-check-label"" style=""font-size: 10px"">10px</span>
                            </label>
                            <label class=""form-check form-check-inline"">
                                <input name=""first-size"" class=""form-check-input"" value=""12px"" type=""radio""");
                BeginWriteAttribute("checked", " checked=\"", 177426, "\"", 177436, 0);
                EndWriteAttribute();
                WriteLiteral(@">
                                <span class=""form-check-label"" style=""font-size: 12px"">12px</span>
                            </label>
                            <label class=""form-check form-check-inline"">
                                <input name=""first-size"" class=""form-check-input"" value=""14px"" type=""radio"">
                                <span class=""form-check-label"" style=""font-size: 14px"">14px</span>
                            </label>
                            <label class=""form-check form-check-inline"">
                                <input name=""first-size"" class=""form-check-input"" value=""16px"" type=""radio"">
                                <span class=""form-check-label"" style=""font-size: 16px"">16px</span>
                            </label>
                        </div>
                    </div>

                    <div class=""mb-3"">
                        <div class=""form-label"">Tamaño de letra de Segundo Campo</div>
                        <div>
                  ");
                WriteLiteral(@"          <label class=""form-check form-check-inline"">
                                <input name=""second-size"" class=""form-check-input"" value=""8px"" type=""radio"">
                                <span class=""form-check-label"" style=""font-size: 8px"">8px</span>
                            </label>
                            <label class=""form-check form-check-inline"">
                                <input name=""second-size"" class=""form-check-input"" value=""10px"" type=""radio"">
                                <span class=""form-check-label"" style=""font-size: 10px"">10px</span>
                            </label>
                            <label class=""form-check form-check-inline"">
                                <input name=""second-size"" class=""form-check-input"" value=""12px"" type=""radio""");
                BeginWriteAttribute("checked", " checked=\"", 179268, "\"", 179278, 0);
                EndWriteAttribute();
                WriteLiteral(@">
                                <span class=""form-check-label"" style=""font-size: 12px"">12px</span>
                            </label>
                            <label class=""form-check form-check-inline"">
                                <input name=""second-size"" class=""form-check-input"" value=""14px"" type=""radio"">
                                <span class=""form-check-label"" style=""font-size: 14px"">14px</span>
                            </label>
                            <label class=""form-check form-check-inline"">
                                <input name=""second-size"" class=""form-check-input"" value=""16px"" type=""radio"">
                                <span class=""form-check-label"" style=""font-size: 16px"">16px</span>
                            </label>
                        </div>
                    </div>

                </div>


                    <div class=""modal-footer"">
                        <a href=""#"" class=""btn btn-link link-secondary"" data-bs-dismiss=""modal"">
 ");
                WriteLiteral(@"                           Cancelar
                        </a>
                        <a onclick=""fnApplyColors()"" class=""btn btn-primary ms-auto"">
                            Aplicar
                        </a>
                    </div>

                </div>
        </div>
    </div>

    <!-- (Irrelevant source removed.) -->
    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "16f7ef06750d6ef1c531f6c2946b92076f0843b4200277", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "16f7ef06750d6ef1c531f6c2946b92076f0843b4201378", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "16f7ef06750d6ef1c531f6c2946b92076f0843b4202479", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "16f7ef06750d6ef1c531f6c2946b92076f0843b4203580", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "16f7ef06750d6ef1c531f6c2946b92076f0843b4204681", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n\r\n");
                WriteLiteral("\r\n\r\n\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n</html>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<IEnumerable<ModeladorApp.Models.Entities.TB_PERMISOS>> Html { get; private set; }
    }
}
#pragma warning restore 1591
